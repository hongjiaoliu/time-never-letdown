const e=JSON.parse('{"key":"v-078e8b43","path":"/enterprise/dubbo/4-spi-in-dubbo.html","title":"4-Dubbo SPI 的原理和实现","lang":"zh-CN","frontmatter":{"icon":"edit","date":"2022-07-19T00:00:00.000Z","category":["Java企业开发"],"tag":["Dubbo","源码学习"],"star":false,"description":"4-Dubbo SPI 的原理和实现 1.简介 SPI 全称为 Service Provider Interface，是一种服务发现机制。SPI 的本质是将接口实现类的全限定名配置在文件中，并由服务加载器读取配置文件，加载实现类。这样可以在运行时，动态为接口替换实现类。正因此特性，我们可以很容易的通过 SPI 机制为我们的程序提供拓展功能。SPI 机制在第三方框架中也有所应用，比如 Dubbo 就是通过 SPI 机制加载所有的组件。不过，Dubbo 并未使用 Java 原生的 SPI 机制，而是对其进行了增强，使其能够更好的满足需求。在 Dubbo 中，SPI 是一个非常重要的模块。基于 SPI，我们可以很容易的对 Dubbo 进行拓展。如果大家想要学习 Dubbo 的源码，SPI 机制务必弄懂。接下来，我们先来了解一下 Java SPI 与 Dubbo SPI 的用法，然后再来分析 Dubbo SPI 的源码。 需要特别说明的是，本篇文章以及本系列其他文章所分析的源码版本均为 dubbo-2.6.4。因此大家在阅读文章的过程中，需注意将代码版本切换到 dubbo-2.6.4 tag 上。","head":[["meta",{"property":"og:url","content":"https://liuhongjiao.cn/enterprise/dubbo/4-spi-in-dubbo.html"}],["meta",{"property":"og:site_name","content":"L - 时光不负"}],["meta",{"property":"og:title","content":"4-Dubbo SPI 的原理和实现"}],["meta",{"property":"og:description","content":"4-Dubbo SPI 的原理和实现 1.简介 SPI 全称为 Service Provider Interface，是一种服务发现机制。SPI 的本质是将接口实现类的全限定名配置在文件中，并由服务加载器读取配置文件，加载实现类。这样可以在运行时，动态为接口替换实现类。正因此特性，我们可以很容易的通过 SPI 机制为我们的程序提供拓展功能。SPI 机制在第三方框架中也有所应用，比如 Dubbo 就是通过 SPI 机制加载所有的组件。不过，Dubbo 并未使用 Java 原生的 SPI 机制，而是对其进行了增强，使其能够更好的满足需求。在 Dubbo 中，SPI 是一个非常重要的模块。基于 SPI，我们可以很容易的对 Dubbo 进行拓展。如果大家想要学习 Dubbo 的源码，SPI 机制务必弄懂。接下来，我们先来了解一下 Java SPI 与 Dubbo SPI 的用法，然后再来分析 Dubbo SPI 的源码。 需要特别说明的是，本篇文章以及本系列其他文章所分析的源码版本均为 dubbo-2.6.4。因此大家在阅读文章的过程中，需注意将代码版本切换到 dubbo-2.6.4 tag 上。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-02-14T01:41:46.000Z"}],["meta",{"property":"article:tag","content":"Dubbo"}],["meta",{"property":"article:tag","content":"源码学习"}],["meta",{"property":"article:published_time","content":"2022-07-19T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-02-14T01:41:46.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"4-Dubbo SPI 的原理和实现\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-07-19T00:00:00.000Z\\",\\"dateModified\\":\\"2023-02-14T01:41:46.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"1.简介","slug":"_1-简介","link":"#_1-简介","children":[]},{"level":2,"title":"2.SPI 示例","slug":"_2-spi-示例","link":"#_2-spi-示例","children":[{"level":3,"title":"2.1 Java SPI 示例","slug":"_2-1-java-spi-示例","link":"#_2-1-java-spi-示例","children":[]},{"level":3,"title":"2.2 Dubbo SPI 示例","slug":"_2-2-dubbo-spi-示例","link":"#_2-2-dubbo-spi-示例","children":[]}]},{"level":2,"title":"3. Dubbo SPI 源码分析","slug":"_3-dubbo-spi-源码分析","link":"#_3-dubbo-spi-源码分析","children":[{"level":3,"title":"3.1 获取所有的拓展类","slug":"_3-1-获取所有的拓展类","link":"#_3-1-获取所有的拓展类","children":[]},{"level":3,"title":"3.2 Dubbo IOC","slug":"_3-2-dubbo-ioc","link":"#_3-2-dubbo-ioc","children":[]}]},{"level":2,"title":"4.总结","slug":"_4-总结","link":"#_4-总结","children":[]}],"git":{"createdTime":1676338906000,"updatedTime":1676338906000,"contributors":[{"name":"liuhongjiao","email":"liuhongjiao@koolearn.com","commits":1}]},"readingTime":{"minutes":13.88,"words":4163},"filePathRelative":"enterprise/dubbo/4-spi-in-dubbo.md","localizedDate":"2022年7月19日","excerpt":"<h1> 4-Dubbo SPI 的原理和实现</h1>\\n<h2> 1.简介</h2>\\n<p>SPI 全称为 Service Provider Interface，是一种服务发现机制。SPI 的本质是将接口实现类的全限定名配置在文件中，并由服务加载器读取配置文件，加载实现类。这样可以在运行时，动态为接口替换实现类。正因此特性，我们可以很容易的通过 SPI 机制为我们的程序提供拓展功能。SPI 机制在第三方框架中也有所应用，比如 Dubbo 就是通过 SPI 机制加载所有的组件。不过，Dubbo 并未使用 Java 原生的 SPI 机制，而是对其进行了增强，使其能够更好的满足需求。在 Dubbo 中，SPI 是一个非常重要的模块。基于 SPI，我们可以很容易的对 Dubbo 进行拓展。如果大家想要学习 Dubbo 的源码，SPI 机制务必弄懂。接下来，我们先来了解一下 Java SPI 与 Dubbo SPI 的用法，然后再来分析 Dubbo SPI 的源码。\\n需要特别说明的是，本篇文章以及本系列其他文章所分析的源码版本均为 <strong>dubbo-2.6.4</strong>。因此大家在阅读文章的过程中，需注意将代码版本切换到 dubbo-2.6.4 tag 上。</p>","autoDesc":true}');export{e as data};

import{_ as e,V as a,W as s,Z as l}from"./framework-e5211252.js";const n={},i=l(`<h1 id="kubernetes-组件" tabindex="-1"><a class="header-anchor" href="#kubernetes-组件" aria-hidden="true">#</a> Kubernetes 组件</h1><h2 id="k8s核心组件" tabindex="-1"><a class="header-anchor" href="#k8s核心组件" aria-hidden="true">#</a> K8S核心组件</h2><ol><li>etcd：Kubernetes 的分布式键值存储系统，用于存储配置数据和状态信息。</li><li>kube-apiserver：Kubernetes 的 API 服务器，是 Kubernetes 的控制面板的前端，处理所有 API 请求。</li><li>kube-controller-manager：Kubernetes 控制器的主要组件，用于管理集群状态，如副本数、滚动升级等。</li><li>kube-scheduler：Kubernetes 的调度器，负责将容器部署到节点上，并根据负载均衡策略来分配资源。</li><li>kubelet：Kubernetes 的节点代理，负责在节点上启动和停止容器，同时与 kube-apiserver 通信。</li><li>kube-proxy：Kubernetes 的网络代理，用于管理网络规则和负载均衡。</li><li>Container runtime：容器运行时，如 Docker、rkt 等，用于运行容器镜像。</li><li>kubectl: 命令行接口，用于对kubernetes集群运行命令</li></ol><p>这些组件共同工作，使 Kubernetes 能够实现自动化容器编排和管理。</p><h2 id="组件架构图" tabindex="-1"><a class="header-anchor" href="#组件架构图" aria-hidden="true">#</a> 组件架构图</h2><figure><img src="https://cdn.liuhongjiao.cn/images/2023/03/28/3-k8s-components/1679968239176.png" alt="图 2" tabindex="0" loading="lazy"><figcaption>图 2</figcaption></figure><h2 id="面试题-pod是如何被创建到目标机器上的-组件走向" tabindex="-1"><a class="header-anchor" href="#面试题-pod是如何被创建到目标机器上的-组件走向" aria-hidden="true">#</a> 面试题：Pod是如何被创建到目标机器上的，组件走向</h2><figure><img src="https://cdn.liuhongjiao.cn/images/2023/03/27/3-k8s-components/1679908268941.png" alt="图 1" tabindex="0" loading="lazy"><figcaption>图 1</figcaption></figure><h2 id="pod" tabindex="-1"><a class="header-anchor" href="#pod" aria-hidden="true">#</a> Pod</h2><p>在 Kubernetes 中，Pod 是最小的可部署对象，由一个或多个紧密关联的容器组成，共享同一个网络命名空间和存储卷。Pod 通常被用于运行一个应用程序的实例。</p><p>以下是 Pod 的一些特点：</p><ol><li>多容器：Pod 可以包含多个容器，这些容器可以共享同一个命名空间和卷，并能够相互通信。</li><li>网络：Pod 中的容器共享同一个 IP 地址和端口空间，它们可以使用 localhost 来相互访问。</li><li>存储：Pod 可以共享同一个存储卷，这个存储卷中的数据对于 Pod 中的所有容器都是可见的。</li><li>生命周期：Pod 具有自己的生命周期，可以被创建、启动、暂停、恢复和销毁。Pod 的生命周期由 Kubernetes 控制器管理。</li><li>调度：Pod 由 Kubernetes 调度器进行调度，可以根据各种条件（如资源需求、节点选择器等）进行筛选和分配。</li></ol><p>Pod 是 Kubernetes 中最基本的部署单位，可以将多个容器组合在一个 Pod 中，这些容器可以协同工作，共享资源和通信。Pod 也是水平扩展和部署应用程序的基础。</p><h2 id="label" tabindex="-1"><a class="header-anchor" href="#label" aria-hidden="true">#</a> Label</h2><p>在 Kubernetes 中，Label 是一种用于对资源进行分类和选择的标签。Label 是由键值对组成的元数据，可以附加到 Kubernetes 中的各种对象上，例如 Pod、Service、ReplicationController、Deployment 等。Label 可以根据不同的需求和场景进行定义和使用，通常用于：</p><ol><li>选择器：使用 Label Selector 可以根据 Label 对资源进行选择和筛选。例如，可以使用 Label Selector 来选择一组特定的 Pod 并对它们进行操作。</li><li>组织：使用 Label 可以对资源进行分类和组织。例如，可以使用 Label 来标识一组应用程序、环境或者团队。</li><li>监控：使用 Label 可以为资源添加监控指标和标签。例如，可以使用 Label 来标识一组 Pod 并对它们进行监控。</li></ol><p>以下是一些 Label 的使用示例：</p><div class="language-perl line-numbers-mode" data-ext="perl"><pre class="language-perl"><code>app<span class="token punctuation">:</span> nginx
env<span class="token punctuation">:</span> prod
tier<span class="token punctuation">:</span> frontend
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的示例中，Label 包括应用程序名称、环境名称和层级（例如前端或后端）。</p><p>在 Kubernetes 中，Label 是一种非常强大和灵活的元数据，可以帮助您管理和组织复杂的应用程序和服务架构。通过使用 Label，您可以轻松地对资源进行选择、分类和监控，并在需要时对它们进行操作和管理。</p><h2 id="namespace" tabindex="-1"><a class="header-anchor" href="#namespace" aria-hidden="true">#</a> Namespace</h2><p>在 Kubernetes 中，Namespace 是用于将集群内的资源划分为多个虚拟集群的一种机制。Namespace 可以将一个大型的 Kubernetes 集群划分为多个逻辑集群，每个集群具有自己的资源配额、网络策略和安全机制。这样可以使不同的团队或应用程序之间相互隔离，减少资源冲突和安全问题。</p><p>在 Kubernetes 中，有以下几种默认的 Namespace：</p><ul><li>default: 默认 Namespace，没有指定 Namespace 的资源都会被分配到该 Namespace 中。</li><li>kube-system: 用于存储 Kubernetes 系统组件的 Namespace。</li><li>kube-public: 存储公共数据的 Namespace，该 Namespace 中的数据可以被所有用户和 Pod 访问。</li></ul><p>您还可以创建自己的 Namespace，例如创建一个 Namespace 用于存储生产环境的应用程序，另一个 Namespace 用于存储测试环境的应用程序等等。</p><p>以下是一些 Namespace 的使用场景：</p><ol><li>多租户架构：使用 Namespace 可以将 Kubernetes 集群划分为多个租户，每个租户都有自己的 Namespace，可以进行资源配额和隔离。</li><li>多环境部署：使用 Namespace 可以将不同的环境（例如开发、测试、生产）划分到不同的 Namespace 中，可以进行资源配额和隔离，并且可以使用不同的配置文件和镜像。</li><li>资源隔离：使用 Namespace 可以对不同的资源进行隔离，例如对于不同的团队或应用程序进行隔离。</li></ol><p>在 Kubernetes 中，Namespace 是一种非常有用和灵活的机制，可以将一个大型的 Kubernetes 集群划分为多个虚拟集群，每个集群具有自己的资源配额、网络策略和安全机制。这可以使不同的团队或应用程序之间相互隔离，减少资源冲突和安全问题。</p><p>在 Kubernetes 中，有很多命令可以用于管理和操作 Namespace。以下是一些常用的命令：</p><ol><li>创建 Namespace：</li></ol><div class="language-perl line-numbers-mode" data-ext="perl"><pre class="language-perl"><code>kubectl create namespace <span class="token filehandle symbol">&lt;namespace-name&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>该命令可以创建一个新的 Namespace。</p><ol start="2"><li>列出 Namespace：</li></ol><div class="language-perl line-numbers-mode" data-ext="perl"><pre class="language-perl"><code>kubectl get namespaces
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>该命令可以列出 Kubernetes 集群中的所有 Namespace。</p><ol start="3"><li>切换 Namespace：</li></ol><div class="language-perl line-numbers-mode" data-ext="perl"><pre class="language-perl"><code>kubectl config set<span class="token operator">-</span>context <span class="token variable">$(</span>kubectl config current<span class="token operator">-</span>context<span class="token punctuation">)</span> <span class="token operator">--</span>namespace<span class="token operator">=</span><span class="token filehandle symbol">&lt;namespace-name&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>该命令可以将当前的上下文切换到指定的 Namespace。</p><ol start="4"><li>删除 Namespace：</li></ol><div class="language-perl line-numbers-mode" data-ext="perl"><pre class="language-perl"><code>kubectl <span class="token keyword">delete</span> namespace <span class="token filehandle symbol">&lt;namespace-name&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>该命令可以删除指定的 Namespace。</p><ol start="5"><li>在 Namespace 中创建 Pod：</li></ol><div class="language-per line-numbers-mode" data-ext="per"><pre class="language-per"><code>kubectl run &lt;pod-name&gt; --image=&lt;image-name&gt; --namespace=&lt;namespace-name&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>该命令可以在指定的 Namespace 中创建一个新的 Pod。</p><ol start="6"><li>列出 Namespace 中的资源：</li></ol><div class="language-perl line-numbers-mode" data-ext="perl"><pre class="language-perl"><code>kubectl get <span class="token filehandle symbol">&lt;resource-type&gt;</span> <span class="token operator">--</span>namespace<span class="token operator">=</span><span class="token filehandle symbol">&lt;namespace-name&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>该命令可以列出指定 Namespace 中的资源，例如 Pod、Service、Deployment 等。</p><ol start="7"><li>查看 Namespace 中的详细信息：</li></ol><div class="language-perl line-numbers-mode" data-ext="perl"><pre class="language-perl"><code>kubectl describe namespace <span class="token filehandle symbol">&lt;namespace-name&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>该命令可以查看指定 Namespace 的详细信息，包括 Namespace 的标签、资源配额和网络策略等。</p>`,50),r=[i];function p(t,c){return a(),s("div",null,r)}const o=e(n,[["render",p],["__file","3-k8s-components.html.vue"]]);export{o as default};

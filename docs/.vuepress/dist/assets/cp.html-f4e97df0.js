import{_ as a,V as e,W as s,Z as n}from"./framework-bcbeea85.js";const d={},i=n(`<h1 id="基本-cp" tabindex="-1"><a class="header-anchor" href="#基本-cp" aria-hidden="true">#</a> 基本 | cp</h1><p><code>cp</code>（copy的缩写）是一个用于复制文件和目录的命令，通常在命令行终端中使用。以下是从入门到高阶的<code>cp</code>命令详细讲解。</p><h2 id="入门" tabindex="-1"><a class="header-anchor" href="#入门" aria-hidden="true">#</a> 入门</h2><h3 id="_1-复制文件" tabindex="-1"><a class="header-anchor" href="#_1-复制文件" aria-hidden="true">#</a> 1. 复制文件</h3><p>要复制一个文件，只需在命令行中输入以下命令：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">cp</span> 源文件 目标文件
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>例如，要将文件<code>file.txt</code>复制到<code>backup</code>目录中，可以执行以下命令：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">cp</span> file.txt backup/
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_2-复制多个文件" tabindex="-1"><a class="header-anchor" href="#_2-复制多个文件" aria-hidden="true">#</a> 2. 复制多个文件</h3><p>你可以同时复制多个文件，只需在命令中列出它们的名称：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">cp</span> 文件1 文件2 文件3 目标目录
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>例如：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">cp</span> file1.txt file2.txt file3.txt backup/
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="进阶" tabindex="-1"><a class="header-anchor" href="#进阶" aria-hidden="true">#</a> 进阶</h2><h3 id="_3-复制目录" tabindex="-1"><a class="header-anchor" href="#_3-复制目录" aria-hidden="true">#</a> 3. 复制目录</h3><p>要复制一个目录及其内容，需要使用<code>-r</code>选项（递归复制）。递归复制会将目录及其子目录、文件全部复制。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">cp</span> <span class="token parameter variable">-r</span> 源目录 目标目录
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>例如：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">cp</span> <span class="token parameter variable">-r</span> source_dir/ destination_dir/
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_4-保留文件属性" tabindex="-1"><a class="header-anchor" href="#_4-保留文件属性" aria-hidden="true">#</a> 4. 保留文件属性</h3><p>使用<code>-p</code>选项可以保留源文件的属性，包括权限、所有者和时间戳。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">cp</span> <span class="token parameter variable">-p</span> 源文件 目标文件
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>例如：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">cp</span> <span class="token parameter variable">-p</span> file.txt backup/
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="高阶" tabindex="-1"><a class="header-anchor" href="#高阶" aria-hidden="true">#</a> 高阶</h2><h3 id="_5-覆盖已存在的文件" tabindex="-1"><a class="header-anchor" href="#_5-覆盖已存在的文件" aria-hidden="true">#</a> 5. 覆盖已存在的文件</h3><p>如果目标文件已经存在，<code>cp</code> 默认会询问是否要覆盖。你可以使用<code>-f</code>选项来强制复制并覆盖已存在的文件。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">cp</span> <span class="token parameter variable">-f</span> 源文件 目标文件
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_6-显示复制进度" tabindex="-1"><a class="header-anchor" href="#_6-显示复制进度" aria-hidden="true">#</a> 6. 显示复制进度</h3><p>通过使用<code>-v</code>选项，你可以在复制文件时显示详细信息，包括每个复制的文件名称。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">cp</span> <span class="token parameter variable">-v</span> 文件1 文件2 目标目录
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_7-复制链接文件" tabindex="-1"><a class="header-anchor" href="#_7-复制链接文件" aria-hidden="true">#</a> 7. 复制链接文件</h3><p>默认情况下，<code>cp</code> 复制符号链接（软链接）的目标文件，而不是链接本身。要复制链接本身，可以使用<code>-d</code>选项。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">cp</span> <span class="token parameter variable">-d</span> 链接文件 目标目录
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>通过<code>cp</code>命令，你可以轻松复制文件、目录及其内容，并根据需要保留文件属性、覆盖已存在的文件等。无论是在入门阶段还是在高级用法中，<code>cp</code>都是一个非常有用的命令。</p><hr>`,37),c=[i];function r(l,t){return e(),s("div",null,c)}const h=a(d,[["render",r],["__file","cp.html.vue"]]);export{h as default};

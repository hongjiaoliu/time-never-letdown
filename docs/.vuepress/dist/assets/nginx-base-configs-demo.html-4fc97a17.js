const n=JSON.parse(`{"key":"v-4c3d147b","path":"/enterprise/nginx/nginx-base-configs-demo.html","title":"Nginx | 1-核心配置","lang":"zh-CN","frontmatter":{"icon":"edit","date":"2023-01-30T00:00:00.000Z","category":["FE"],"tag":["Nginx"],"star":false,"description":"Nginx | 1-核心配置 #定义 nginx 运行的用户和用户组 user www www; #nginx 进程数，建议设置为等于 CPU 总核心数。 worker_processes 8; #nginx 默认没有开启利用多核 CPU, 通过增加 worker_cpu_affinity 配置参数来充分利用多核 CPU 以下是 8 核的配置参数 worker_cpu_affinity 00000001 00000010 00000100 00001000 00010000 00100000 01000000 10000000; #全局错误日志定义类型，[ debug | info | notice | warn | error | crit ] error_log /var/log/nginx/error.log info; #进程文件 pid /var/run/nginx.pid; #一个 nginx 进程打开的最多文件描述符数目，理论值应该是最多打开文件数（系统的值 ulimit -n）与 nginx 进程数相除，但是 nginx 分配请求并不均匀，所以建议与 ulimit -n 的值保持一致。 worker_rlimit_nofile 65535; #工作模式与连接数上限 events { #参考事件模型，use [ kqueue | rtsig | epoll | /dev/poll | select | poll ]; epoll 模型是 Linux 2.6 以上版本内核中的高性能网络 I/O 模型，如果跑在 FreeBSD 上面，就用 kqueue 模型。 #epoll 是多路复用 IO(I/O Multiplexing) 中的一种方式，但是仅用于 linux2.6 以上内核，可以大大提高 nginx 的性能 use epoll; ############################################################################ #单个后台 worker process 进程的最大并发链接数 #事件模块指令，定义 nginx 每个进程最大连接数，默认 1024。最大客户连接数由 worker_processes 和 worker_connections 决定 #即 max_client=worker_processes*worker_connections, 在作为反向代理时：max_client=worker_processes*worker_connections / 4 worker_connections 65535; ############################################################################ } #设定 http 服务器 http { include mime.types; #文件扩展名与文件类型映射表 default_type application/octet-stream; #默认文件类型 #charset utf-8; #默认编码 server_names_hash_bucket_size 128; #服务器名字的 hash 表大小 client_header_buffer_size 32k; #上传文件大小限制 large_client_header_buffers 4 64k; #设定请求缓 client_max_body_size 8m; #设定请求缓 sendfile on; #开启高效文件传输模式，sendfile 指令指定 nginx 是否调用 sendfile 函数来输出文件，对于普通应用设为 on，如果用来进行下载等应用磁盘 IO 重负载应用，可设置为 off，以平衡磁盘与网络 I/O 处理速度，降低系统的负载。注意：如果图片显示不正常把这个改成 off。 autoindex on; #开启目录列表访问，合适下载服务器，默认关闭。 tcp_nopush on; #防止网络阻塞 tcp_nodelay on; #防止网络阻塞 ##连接客户端超时时间各种参数设置## keepalive_timeout 120; #单位是秒，客户端连接时时间，超时之后服务器端自动关闭该连接 如果 nginx 守护进程在这个等待的时间里，一直没有收到浏览发过来 http 请求，则关闭这个 http 连接 client_header_timeout 10; #客户端请求头的超时时间 client_body_timeout 10; #客户端请求主体超时时间 reset_timedout_connection on; #告诉 nginx 关闭不响应的客户端连接。这将会释放那个客户端所占有的内存空间 send_timeout 10; #客户端响应超时时间，在两次客户端读取操作之间。如果在这段时间内，客户端没有读取任何数据，nginx 就会关闭连接 ################################ #FastCGI 相关参数是为了改善网站的性能：减少资源占用，提高访问速度。下面参数看字面意思都能理解。 fastcgi_connect_timeout 300; fastcgi_send_timeout 300; fastcgi_read_timeout 300; fastcgi_buffer_size 64k; fastcgi_buffers 4 64k; fastcgi_busy_buffers_size 128k; fastcgi_temp_file_write_size 128k; ###作为代理缓存服务器设置####### ###先写到 temp 再移动到 cache #proxy_cache_path /var/tmp/nginx/proxy_cache levels=1:2 keys_zone=cache_one:512m inactive=10m max_size=64m; ###以上 proxy_temp 和 proxy_cache 需要在同一个分区中 ###levels=1:2 表示缓存级别，表示缓存目录的第一级目录是 1 个字符，第二级目录是 2 个字符 keys_zone=cache_one:128m 缓存空间起名为 cache_one 大小为 512m ###max_size=64m 表示单个文件超过 128m 就不缓存了 inactive=10m 表示缓存的数据，10 分钟内没有被访问过就删除 #########end#################### #####对传输文件压缩########### #gzip 模块设置 gzip on; #开启 gzip 压缩输出 gzip_min_length 1k; #最小压缩文件大小 gzip_buffers 4 16k; #压缩缓冲区 gzip_http_version 1.0; #压缩版本（默认 1.1，前端如果是 squid2.5 请使用 1.0） gzip_comp_level 2; #压缩等级，gzip 压缩比，1 为最小，处理最快；9 为压缩比最大，处理最慢，传输速度最快，也最消耗 CPU； gzip_types text/plain application/x-javascript text/css application/xml; #压缩类型，默认就已经包含 text/html，所以下面就不用再写了，写上去也不会有问题，但是会有一个 warn。 gzip_vary on; ############################## #limit_zone crawler $binary_remote_addr 10m; #开启限制 IP 连接数的时候需要使用 upstream blog.ha97.com { #upstream 的负载均衡，weight 是权重，可以根据机器配置定义权重。weigth 参数表示权值，权值越高被分配到的几率越大。 server 192.168.80.121:80 weight=3; server 192.168.80.122:80 weight=2; server 192.168.80.123:80 weight=3; } #虚拟主机的配置 server { #监听端口 listen 80; #############https################## #listen 443 ssl; #ssl_certificate /opt/https/xxxxxx.crt; #ssl_certificate_key /opt/https/xxxxxx.key; #ssl_protocols SSLv3 TLSv1; #ssl_ciphers HIGH:!ADH:!EXPORT57:RC4+RSA:+MEDIUM; #ssl_prefer_server_ciphers on; #ssl_session_cache shared:SSL:2m; #ssl_session_timeout 5m; ####################################end #域名可以有多个，用空格隔开 server_name www.ha97.com ha97.com; index index.html index.htm index.php; root /data/www/ha97; location ~ .*.(php|php5)?$ { fastcgi_pass 127.0.0.1:9000; fastcgi_index index.php; include fastcgi.conf; } #图片缓存时间设置 location ~ .*.(gif|jpg|jpeg|png|bmp|swf)$ { expires 10d; } #JS 和 CSS 缓存时间设置 location ~ .*.(js|css)?$ { expires 1h; } #日志格式设定 log_format access '$remote_addr - $remote_user [$time_local] \\"$request\\" ' '$status $body_bytes_sent \\"$http_referer\\" ' '\\"$http_user_agent\\" $http_x_forwarded_for'; #定义本虚拟主机的访问日志 access_log /var/log/nginx/ha97access.log access; #对 \\"/\\" 启用反向代理 location / { proxy_pass http://127.0.0.1:88; proxy_redirect off; proxy_set_header X-Real-IP $remote_addr; #后端的 Web 服务器可以通过 X-Forwarded-For 获取用户真实 IP proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; #以下是一些反向代理的配置，可选。 proxy_set_header Host $host; client_max_body_size 10m; #允许客户端请求的最大单文件字节数 client_body_buffer_size 128k; #缓冲区代理缓冲用户端请求的最大字节数， ##代理设置 以下设置是 nginx 和后端服务器之间通讯的设置## proxy_connect_timeout 90; #nginx 跟后端服务器连接超时时间（代理连接超时） proxy_send_timeout 90; #后端服务器数据回传时间（代理发送超时） proxy_read_timeout 90; #连接成功后，后端服务器响应时间（代理接收超时） proxy_buffering on; #该指令开启从后端被代理服务器的响应内容缓冲 此参数开启后 proxy_buffers 和 proxy_busy_buffers_size 参数才会起作用 proxy_buffer_size 4k; #设置代理服务器（nginx）保存用户头信息的缓冲区大小 proxy_buffers 4 32k; #proxy_buffers 缓冲区，网页平均在 32k 以下的设置 proxy_busy_buffers_size 64k; #高负荷下缓冲大小（proxy_buffers*2） proxy_max_temp_file_size 2048m; #默认 1024m, 该指令用于设置当网页内容大于 proxy_buffers 时，临时文件大小的最大值。如果文件大于这个值，它将从 upstream 服务器同步地传递请求，而不是缓冲到磁盘 proxy_temp_file_write_size 512k; 这是当被代理服务器的响应过大时 nginx 一次性写入临时文件的数据量。 proxy_temp_path /var/tmp/nginx/proxy_temp; ##定义缓冲存储目录，之前必须要先手动创建此目录 proxy_headers_hash_max_size 51200; proxy_headers_hash_bucket_size 6400; ####################################################### } #设定查看 nginx 状态的地址 location /nginxStatus { stub_status on; access_log on; auth_basic \\"nginxStatus\\"; auth_basic_user_file conf/htpasswd; #htpasswd 文件的内容可以用 apache 提供的 htpasswd 工具来产生。 } #本地动静分离反向代理配置 #所有 jsp 的页面均交由 tomcat 或 resin 处理 location ~ .(jsp|jspx|do)?$ { proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_pass http://127.0.0.1:8080; } #所有静态文件由 nginx 直接读取不经过 tomcat 或 resin location ~ .*.(htm|html|gif|jpg|jpeg|png|bmp|swf|ioc|rar|zip|txt|flv|mid|doc|ppt|pdf|xls|mp3|wma)$ { expires 15d; } location ~ .*.(js|css)?$ { expires 1h; } } }","head":[["meta",{"property":"og:url","content":"https://liuhongjiao.cn/enterprise/nginx/nginx-base-configs-demo.html"}],["meta",{"property":"og:site_name","content":"L - 时光不负"}],["meta",{"property":"og:title","content":"Nginx | 1-核心配置"}],["meta",{"property":"og:description","content":"Nginx | 1-核心配置 #定义 nginx 运行的用户和用户组 user www www; #nginx 进程数，建议设置为等于 CPU 总核心数。 worker_processes 8; #nginx 默认没有开启利用多核 CPU, 通过增加 worker_cpu_affinity 配置参数来充分利用多核 CPU 以下是 8 核的配置参数 worker_cpu_affinity 00000001 00000010 00000100 00001000 00010000 00100000 01000000 10000000; #全局错误日志定义类型，[ debug | info | notice | warn | error | crit ] error_log /var/log/nginx/error.log info; #进程文件 pid /var/run/nginx.pid; #一个 nginx 进程打开的最多文件描述符数目，理论值应该是最多打开文件数（系统的值 ulimit -n）与 nginx 进程数相除，但是 nginx 分配请求并不均匀，所以建议与 ulimit -n 的值保持一致。 worker_rlimit_nofile 65535; #工作模式与连接数上限 events { #参考事件模型，use [ kqueue | rtsig | epoll | /dev/poll | select | poll ]; epoll 模型是 Linux 2.6 以上版本内核中的高性能网络 I/O 模型，如果跑在 FreeBSD 上面，就用 kqueue 模型。 #epoll 是多路复用 IO(I/O Multiplexing) 中的一种方式，但是仅用于 linux2.6 以上内核，可以大大提高 nginx 的性能 use epoll; ############################################################################ #单个后台 worker process 进程的最大并发链接数 #事件模块指令，定义 nginx 每个进程最大连接数，默认 1024。最大客户连接数由 worker_processes 和 worker_connections 决定 #即 max_client=worker_processes*worker_connections, 在作为反向代理时：max_client=worker_processes*worker_connections / 4 worker_connections 65535; ############################################################################ } #设定 http 服务器 http { include mime.types; #文件扩展名与文件类型映射表 default_type application/octet-stream; #默认文件类型 #charset utf-8; #默认编码 server_names_hash_bucket_size 128; #服务器名字的 hash 表大小 client_header_buffer_size 32k; #上传文件大小限制 large_client_header_buffers 4 64k; #设定请求缓 client_max_body_size 8m; #设定请求缓 sendfile on; #开启高效文件传输模式，sendfile 指令指定 nginx 是否调用 sendfile 函数来输出文件，对于普通应用设为 on，如果用来进行下载等应用磁盘 IO 重负载应用，可设置为 off，以平衡磁盘与网络 I/O 处理速度，降低系统的负载。注意：如果图片显示不正常把这个改成 off。 autoindex on; #开启目录列表访问，合适下载服务器，默认关闭。 tcp_nopush on; #防止网络阻塞 tcp_nodelay on; #防止网络阻塞 ##连接客户端超时时间各种参数设置## keepalive_timeout 120; #单位是秒，客户端连接时时间，超时之后服务器端自动关闭该连接 如果 nginx 守护进程在这个等待的时间里，一直没有收到浏览发过来 http 请求，则关闭这个 http 连接 client_header_timeout 10; #客户端请求头的超时时间 client_body_timeout 10; #客户端请求主体超时时间 reset_timedout_connection on; #告诉 nginx 关闭不响应的客户端连接。这将会释放那个客户端所占有的内存空间 send_timeout 10; #客户端响应超时时间，在两次客户端读取操作之间。如果在这段时间内，客户端没有读取任何数据，nginx 就会关闭连接 ################################ #FastCGI 相关参数是为了改善网站的性能：减少资源占用，提高访问速度。下面参数看字面意思都能理解。 fastcgi_connect_timeout 300; fastcgi_send_timeout 300; fastcgi_read_timeout 300; fastcgi_buffer_size 64k; fastcgi_buffers 4 64k; fastcgi_busy_buffers_size 128k; fastcgi_temp_file_write_size 128k; ###作为代理缓存服务器设置####### ###先写到 temp 再移动到 cache #proxy_cache_path /var/tmp/nginx/proxy_cache levels=1:2 keys_zone=cache_one:512m inactive=10m max_size=64m; ###以上 proxy_temp 和 proxy_cache 需要在同一个分区中 ###levels=1:2 表示缓存级别，表示缓存目录的第一级目录是 1 个字符，第二级目录是 2 个字符 keys_zone=cache_one:128m 缓存空间起名为 cache_one 大小为 512m ###max_size=64m 表示单个文件超过 128m 就不缓存了 inactive=10m 表示缓存的数据，10 分钟内没有被访问过就删除 #########end#################### #####对传输文件压缩########### #gzip 模块设置 gzip on; #开启 gzip 压缩输出 gzip_min_length 1k; #最小压缩文件大小 gzip_buffers 4 16k; #压缩缓冲区 gzip_http_version 1.0; #压缩版本（默认 1.1，前端如果是 squid2.5 请使用 1.0） gzip_comp_level 2; #压缩等级，gzip 压缩比，1 为最小，处理最快；9 为压缩比最大，处理最慢，传输速度最快，也最消耗 CPU； gzip_types text/plain application/x-javascript text/css application/xml; #压缩类型，默认就已经包含 text/html，所以下面就不用再写了，写上去也不会有问题，但是会有一个 warn。 gzip_vary on; ############################## #limit_zone crawler $binary_remote_addr 10m; #开启限制 IP 连接数的时候需要使用 upstream blog.ha97.com { #upstream 的负载均衡，weight 是权重，可以根据机器配置定义权重。weigth 参数表示权值，权值越高被分配到的几率越大。 server 192.168.80.121:80 weight=3; server 192.168.80.122:80 weight=2; server 192.168.80.123:80 weight=3; } #虚拟主机的配置 server { #监听端口 listen 80; #############https################## #listen 443 ssl; #ssl_certificate /opt/https/xxxxxx.crt; #ssl_certificate_key /opt/https/xxxxxx.key; #ssl_protocols SSLv3 TLSv1; #ssl_ciphers HIGH:!ADH:!EXPORT57:RC4+RSA:+MEDIUM; #ssl_prefer_server_ciphers on; #ssl_session_cache shared:SSL:2m; #ssl_session_timeout 5m; ####################################end #域名可以有多个，用空格隔开 server_name www.ha97.com ha97.com; index index.html index.htm index.php; root /data/www/ha97; location ~ .*.(php|php5)?$ { fastcgi_pass 127.0.0.1:9000; fastcgi_index index.php; include fastcgi.conf; } #图片缓存时间设置 location ~ .*.(gif|jpg|jpeg|png|bmp|swf)$ { expires 10d; } #JS 和 CSS 缓存时间设置 location ~ .*.(js|css)?$ { expires 1h; } #日志格式设定 log_format access '$remote_addr - $remote_user [$time_local] \\"$request\\" ' '$status $body_bytes_sent \\"$http_referer\\" ' '\\"$http_user_agent\\" $http_x_forwarded_for'; #定义本虚拟主机的访问日志 access_log /var/log/nginx/ha97access.log access; #对 \\"/\\" 启用反向代理 location / { proxy_pass http://127.0.0.1:88; proxy_redirect off; proxy_set_header X-Real-IP $remote_addr; #后端的 Web 服务器可以通过 X-Forwarded-For 获取用户真实 IP proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; #以下是一些反向代理的配置，可选。 proxy_set_header Host $host; client_max_body_size 10m; #允许客户端请求的最大单文件字节数 client_body_buffer_size 128k; #缓冲区代理缓冲用户端请求的最大字节数， ##代理设置 以下设置是 nginx 和后端服务器之间通讯的设置## proxy_connect_timeout 90; #nginx 跟后端服务器连接超时时间（代理连接超时） proxy_send_timeout 90; #后端服务器数据回传时间（代理发送超时） proxy_read_timeout 90; #连接成功后，后端服务器响应时间（代理接收超时） proxy_buffering on; #该指令开启从后端被代理服务器的响应内容缓冲 此参数开启后 proxy_buffers 和 proxy_busy_buffers_size 参数才会起作用 proxy_buffer_size 4k; #设置代理服务器（nginx）保存用户头信息的缓冲区大小 proxy_buffers 4 32k; #proxy_buffers 缓冲区，网页平均在 32k 以下的设置 proxy_busy_buffers_size 64k; #高负荷下缓冲大小（proxy_buffers*2） proxy_max_temp_file_size 2048m; #默认 1024m, 该指令用于设置当网页内容大于 proxy_buffers 时，临时文件大小的最大值。如果文件大于这个值，它将从 upstream 服务器同步地传递请求，而不是缓冲到磁盘 proxy_temp_file_write_size 512k; 这是当被代理服务器的响应过大时 nginx 一次性写入临时文件的数据量。 proxy_temp_path /var/tmp/nginx/proxy_temp; ##定义缓冲存储目录，之前必须要先手动创建此目录 proxy_headers_hash_max_size 51200; proxy_headers_hash_bucket_size 6400; ####################################################### } #设定查看 nginx 状态的地址 location /nginxStatus { stub_status on; access_log on; auth_basic \\"nginxStatus\\"; auth_basic_user_file conf/htpasswd; #htpasswd 文件的内容可以用 apache 提供的 htpasswd 工具来产生。 } #本地动静分离反向代理配置 #所有 jsp 的页面均交由 tomcat 或 resin 处理 location ~ .(jsp|jspx|do)?$ { proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_pass http://127.0.0.1:8080; } #所有静态文件由 nginx 直接读取不经过 tomcat 或 resin location ~ .*.(htm|html|gif|jpg|jpeg|png|bmp|swf|ioc|rar|zip|txt|flv|mid|doc|ppt|pdf|xls|mp3|wma)$ { expires 15d; } location ~ .*.(js|css)?$ { expires 1h; } } }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-01-30T09:32:03.000Z"}],["meta",{"property":"article:tag","content":"Nginx"}],["meta",{"property":"article:published_time","content":"2023-01-30T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-01-30T09:32:03.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Nginx | 1-核心配置\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-01-30T00:00:00.000Z\\",\\"dateModified\\":\\"2023-01-30T09:32:03.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"nginx.conf 文件的结构","slug":"nginx-conf-文件的结构","link":"#nginx-conf-文件的结构","children":[]},{"level":2,"title":"nginx 运行相关的 Global 部分","slug":"nginx-运行相关的-global-部分","link":"#nginx-运行相关的-global-部分","children":[{"level":3,"title":"配置运行 nginx 服务器用户","slug":"配置运行-nginx-服务器用户","link":"#配置运行-nginx-服务器用户","children":[]},{"level":3,"title":"配置允许生成的 worker process 数","slug":"配置允许生成的-worker-process-数","link":"#配置允许生成的-worker-process-数","children":[]},{"level":3,"title":"配置 nginx 进程 PID 存放路径","slug":"配置-nginx-进程-pid-存放路径","link":"#配置-nginx-进程-pid-存放路径","children":[]},{"level":3,"title":"配置错误日志的存放路径","slug":"配置错误日志的存放路径","link":"#配置错误日志的存放路径","children":[]},{"level":3,"title":"配置文件的引入","slug":"配置文件的引入","link":"#配置文件的引入","children":[]}]},{"level":2,"title":"与用户的网络连接相关的 events","slug":"与用户的网络连接相关的-events","link":"#与用户的网络连接相关的-events","children":[{"level":3,"title":"设置网络连接的序列化","slug":"设置网络连接的序列化","link":"#设置网络连接的序列化","children":[]},{"level":3,"title":"设置是否允许同时接收多个网络连接","slug":"设置是否允许同时接收多个网络连接","link":"#设置是否允许同时接收多个网络连接","children":[]},{"level":3,"title":"事件驱动模型的选择","slug":"事件驱动模型的选择","link":"#事件驱动模型的选择","children":[]},{"level":3,"title":"配置最大连接数","slug":"配置最大连接数","link":"#配置最大连接数","children":[]}]},{"level":2,"title":"http","slug":"http","link":"#http","children":[{"level":3,"title":"http Global 代理 - 缓存 - 日志 - 第三方模块配置","slug":"http-global-代理-缓存-日志-第三方模块配置","link":"#http-global-代理-缓存-日志-第三方模块配置","children":[]},{"level":3,"title":"server","slug":"server","link":"#server","children":[]}]},{"level":2,"title":"架设简单文件服务器","slug":"架设简单文件服务器","link":"#架设简单文件服务器","children":[]},{"level":2,"title":"nginx 正向代理","slug":"nginx-正向代理","link":"#nginx-正向代理","children":[]},{"level":2,"title":"nginx 服务器基础配置实例","slug":"nginx-服务器基础配置实例","link":"#nginx-服务器基础配置实例","children":[{"level":3,"title":"测试 myServer1 的访问","slug":"测试-myserver1-的访问","link":"#测试-myserver1-的访问","children":[]},{"level":3,"title":"测试 myServer2 的访问","slug":"测试-myserver2-的访问","link":"#测试-myserver2-的访问","children":[]}]},{"level":2,"title":"使用缓存","slug":"使用缓存","link":"#使用缓存","children":[]},{"level":2,"title":"使用 location 反向代理到已有网站","slug":"使用-location-反向代理到已有网站","link":"#使用-location-反向代理到已有网站","children":[]},{"level":2,"title":"其他","slug":"其他","link":"#其他","children":[{"level":3,"title":"ngx_http_sub_module 替换响应中内容","slug":"ngx-http-sub-module-替换响应中内容","link":"#ngx-http-sub-module-替换响应中内容","children":[]},{"level":3,"title":"配置 http 强制跳转 https","slug":"配置-http-强制跳转-https","link":"#配置-http-强制跳转-https","children":[]}]}],"git":{"createdTime":1675071123000,"updatedTime":1675071123000,"contributors":[{"name":"liuhongjiao","email":"liuhongjiao@koolearn.com","commits":1}]},"readingTime":{"minutes":18.5,"words":5551},"filePathRelative":"enterprise/nginx/nginx-base-configs-demo.md","localizedDate":"2023年1月30日","excerpt":"<h1> Nginx | 1-核心配置</h1>\\n<div class=\\"language-bash line-numbers-mode\\" data-ext=\\"sh\\"><pre class=\\"language-bash\\"><code><span class=\\"token comment\\">#定义 nginx 运行的用户和用户组</span>\\nuser www www<span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token comment\\">#nginx 进程数，建议设置为等于 CPU 总核心数。</span>\\nworker_processes <span class=\\"token number\\">8</span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token comment\\">#nginx 默认没有开启利用多核 CPU, 通过增加 worker_cpu_affinity 配置参数来充分利用多核 CPU 以下是 8 核的配置参数</span>\\nworker_cpu_affinity 00000001 00000010 00000100 00001000 00010000 00100000 01000000 <span class=\\"token number\\">10000000</span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token comment\\">#全局错误日志定义类型，[ debug | info | notice | warn | error | crit ]</span>\\nerror_log /var/log/nginx/error.log info<span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token comment\\">#进程文件</span>\\npid /var/run/nginx.pid<span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token comment\\">#一个 nginx 进程打开的最多文件描述符数目，理论值应该是最多打开文件数（系统的值 ulimit -n）与 nginx 进程数相除，但是 nginx 分配请求并不均匀，所以建议与 ulimit -n 的值保持一致。</span>\\nworker_rlimit_nofile <span class=\\"token number\\">65535</span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token comment\\">#工作模式与连接数上限</span>\\nevents\\n<span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token comment\\">#参考事件模型，use [ kqueue | rtsig | epoll | /dev/poll | select | poll ]; epoll 模型是 Linux 2.6 以上版本内核中的高性能网络 I/O 模型，如果跑在 FreeBSD 上面，就用 kqueue 模型。</span>\\n    <span class=\\"token comment\\">#epoll 是多路复用 IO(I/O Multiplexing) 中的一种方式，但是仅用于 linux2.6 以上内核，可以大大提高 nginx 的性能</span>\\n    use epoll<span class=\\"token punctuation\\">;</span>\\n\\n    <span class=\\"token comment\\">############################################################################</span>\\n    <span class=\\"token comment\\">#单个后台 worker process 进程的最大并发链接数</span>\\n    <span class=\\"token comment\\">#事件模块指令，定义 nginx 每个进程最大连接数，默认 1024。最大客户连接数由 worker_processes 和 worker_connections 决定</span>\\n    <span class=\\"token comment\\">#即 max_client=worker_processes*worker_connections, 在作为反向代理时：max_client=worker_processes*worker_connections / 4</span>\\n    worker_connections <span class=\\"token number\\">65535</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token comment\\">############################################################################</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token comment\\">#设定 http 服务器</span>\\nhttp <span class=\\"token punctuation\\">{</span>\\n    include mime.types<span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">#文件扩展名与文件类型映射表</span>\\n    default_type application/octet-stream<span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">#默认文件类型</span>\\n    <span class=\\"token comment\\">#charset utf-8; #默认编码</span>\\n\\n    server_names_hash_bucket_size <span class=\\"token number\\">128</span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">#服务器名字的 hash 表大小</span>\\n    client_header_buffer_size 32k<span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">#上传文件大小限制</span>\\n    large_client_header_buffers <span class=\\"token number\\">4</span> 64k<span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">#设定请求缓</span>\\n    client_max_body_size 8m<span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">#设定请求缓</span>\\n    sendfile on<span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">#开启高效文件传输模式，sendfile 指令指定 nginx 是否调用 sendfile 函数来输出文件，对于普通应用设为 on，如果用来进行下载等应用磁盘 IO 重负载应用，可设置为 off，以平衡磁盘与网络 I/O 处理速度，降低系统的负载。注意：如果图片显示不正常把这个改成 off。</span>\\n    autoindex on<span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">#开启目录列表访问，合适下载服务器，默认关闭。</span>\\n    tcp_nopush on<span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">#防止网络阻塞</span>\\n    tcp_nodelay on<span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">#防止网络阻塞</span>\\n\\n    <span class=\\"token comment\\">##连接客户端超时时间各种参数设置##</span>\\n    keepalive_timeout  <span class=\\"token number\\">120</span><span class=\\"token punctuation\\">;</span>          <span class=\\"token comment\\">#单位是秒，客户端连接时时间，超时之后服务器端自动关闭该连接 如果 nginx 守护进程在这个等待的时间里，一直没有收到浏览发过来 http 请求，则关闭这个 http 连接</span>\\n    client_header_timeout <span class=\\"token number\\">10</span><span class=\\"token punctuation\\">;</span>        <span class=\\"token comment\\">#客户端请求头的超时时间</span>\\n    client_body_timeout <span class=\\"token number\\">10</span><span class=\\"token punctuation\\">;</span>          <span class=\\"token comment\\">#客户端请求主体超时时间</span>\\n    reset_timedout_connection on<span class=\\"token punctuation\\">;</span>    <span class=\\"token comment\\">#告诉 nginx 关闭不响应的客户端连接。这将会释放那个客户端所占有的内存空间</span>\\n    send_timeout <span class=\\"token number\\">10</span><span class=\\"token punctuation\\">;</span>                 <span class=\\"token comment\\">#客户端响应超时时间，在两次客户端读取操作之间。如果在这段时间内，客户端没有读取任何数据，nginx 就会关闭连接</span>\\n    <span class=\\"token comment\\">################################</span>\\n\\n    <span class=\\"token comment\\">#FastCGI 相关参数是为了改善网站的性能：减少资源占用，提高访问速度。下面参数看字面意思都能理解。</span>\\n    fastcgi_connect_timeout <span class=\\"token number\\">300</span><span class=\\"token punctuation\\">;</span>\\n    fastcgi_send_timeout <span class=\\"token number\\">300</span><span class=\\"token punctuation\\">;</span>\\n    fastcgi_read_timeout <span class=\\"token number\\">300</span><span class=\\"token punctuation\\">;</span>\\n    fastcgi_buffer_size 64k<span class=\\"token punctuation\\">;</span>\\n    fastcgi_buffers <span class=\\"token number\\">4</span> 64k<span class=\\"token punctuation\\">;</span>\\n    fastcgi_busy_buffers_size 128k<span class=\\"token punctuation\\">;</span>\\n    fastcgi_temp_file_write_size 128k<span class=\\"token punctuation\\">;</span>\\n\\n    <span class=\\"token comment\\">###作为代理缓存服务器设置#######</span>\\n    <span class=\\"token comment\\">###先写到 temp 再移动到 cache</span>\\n    <span class=\\"token comment\\">#proxy_cache_path /var/tmp/nginx/proxy_cache levels=1:2 keys_zone=cache_one:512m inactive=10m max_size=64m;</span>\\n    <span class=\\"token comment\\">###以上 proxy_temp 和 proxy_cache 需要在同一个分区中</span>\\n    <span class=\\"token comment\\">###levels=1:2 表示缓存级别，表示缓存目录的第一级目录是 1 个字符，第二级目录是 2 个字符 keys_zone=cache_one:128m 缓存空间起名为 cache_one 大小为 512m</span>\\n    <span class=\\"token comment\\">###max_size=64m 表示单个文件超过 128m 就不缓存了  inactive=10m 表示缓存的数据，10 分钟内没有被访问过就删除</span>\\n    <span class=\\"token comment\\">#########end####################</span>\\n\\n    <span class=\\"token comment\\">#####对传输文件压缩###########</span>\\n    <span class=\\"token comment\\">#gzip 模块设置</span>\\n    <span class=\\"token function\\">gzip</span> on<span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">#开启 gzip 压缩输出</span>\\n    gzip_min_length 1k<span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">#最小压缩文件大小</span>\\n    gzip_buffers <span class=\\"token number\\">4</span> 16k<span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">#压缩缓冲区</span>\\n    gzip_http_version <span class=\\"token number\\">1.0</span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">#压缩版本（默认 1.1，前端如果是 squid2.5 请使用 1.0）</span>\\n    gzip_comp_level <span class=\\"token number\\">2</span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">#压缩等级，gzip 压缩比，1 为最小，处理最快；9 为压缩比最大，处理最慢，传输速度最快，也最消耗 CPU；</span>\\n    gzip_types text/plain application/x-javascript text/css application/xml<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token comment\\">#压缩类型，默认就已经包含 text/html，所以下面就不用再写了，写上去也不会有问题，但是会有一个 warn。</span>\\n    gzip_vary on<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token comment\\">##############################</span>\\n\\n    <span class=\\"token comment\\">#limit_zone crawler $binary_remote_addr 10m; #开启限制 IP 连接数的时候需要使用</span>\\n\\n    upstream blog.ha97.com <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token comment\\">#upstream 的负载均衡，weight 是权重，可以根据机器配置定义权重。weigth 参数表示权值，权值越高被分配到的几率越大。</span>\\n        server <span class=\\"token number\\">192.168</span>.80.121:80 <span class=\\"token assign-left variable\\">weight</span><span class=\\"token operator\\">=</span><span class=\\"token number\\">3</span><span class=\\"token punctuation\\">;</span>\\n        server <span class=\\"token number\\">192.168</span>.80.122:80 <span class=\\"token assign-left variable\\">weight</span><span class=\\"token operator\\">=</span><span class=\\"token number\\">2</span><span class=\\"token punctuation\\">;</span>\\n        server <span class=\\"token number\\">192.168</span>.80.123:80 <span class=\\"token assign-left variable\\">weight</span><span class=\\"token operator\\">=</span><span class=\\"token number\\">3</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n\\n    <span class=\\"token comment\\">#虚拟主机的配置</span>\\n    server <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token comment\\">#监听端口</span>\\n        listen <span class=\\"token number\\">80</span><span class=\\"token punctuation\\">;</span>\\n\\n        <span class=\\"token comment\\">#############https##################</span>\\n        <span class=\\"token comment\\">#listen 443 ssl;</span>\\n        <span class=\\"token comment\\">#ssl_certificate /opt/https/xxxxxx.crt;</span>\\n        <span class=\\"token comment\\">#ssl_certificate_key /opt/https/xxxxxx.key;</span>\\n        <span class=\\"token comment\\">#ssl_protocols SSLv3 TLSv1;</span>\\n        <span class=\\"token comment\\">#ssl_ciphers HIGH:!ADH:!EXPORT57:RC4+RSA:+MEDIUM;</span>\\n        <span class=\\"token comment\\">#ssl_prefer_server_ciphers on;</span>\\n        <span class=\\"token comment\\">#ssl_session_cache shared:SSL:2m;</span>\\n        <span class=\\"token comment\\">#ssl_session_timeout 5m;</span>\\n        <span class=\\"token comment\\">####################################end</span>\\n\\n        <span class=\\"token comment\\">#域名可以有多个，用空格隔开</span>\\n        server_name www.ha97.com ha97.com<span class=\\"token punctuation\\">;</span>\\n        index index.html index.htm index.php<span class=\\"token punctuation\\">;</span>\\n        root /data/www/ha97<span class=\\"token punctuation\\">;</span>\\n        location ~ .*.<span class=\\"token punctuation\\">(</span>php<span class=\\"token operator\\">|</span>php5<span class=\\"token punctuation\\">)</span>?$ <span class=\\"token punctuation\\">{</span>\\n            fastcgi_pass <span class=\\"token number\\">127.0</span>.0.1:9000<span class=\\"token punctuation\\">;</span>\\n            fastcgi_index index.php<span class=\\"token punctuation\\">;</span>\\n            include fastcgi.conf<span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span>\\n\\n        <span class=\\"token comment\\">#图片缓存时间设置</span>\\n        location ~ .*.<span class=\\"token punctuation\\">(</span>gif<span class=\\"token operator\\">|</span>jpg<span class=\\"token operator\\">|</span>jpeg<span class=\\"token operator\\">|</span>png<span class=\\"token operator\\">|</span>bmp<span class=\\"token operator\\">|</span>swf<span class=\\"token punctuation\\">)</span>$ <span class=\\"token punctuation\\">{</span>\\n            expires 10d<span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span>\\n\\n        <span class=\\"token comment\\">#JS 和 CSS 缓存时间设置</span>\\n        location ~ .*.<span class=\\"token punctuation\\">(</span>js<span class=\\"token operator\\">|</span>css<span class=\\"token punctuation\\">)</span>?$ <span class=\\"token punctuation\\">{</span>\\n            expires 1h<span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span>\\n\\n        <span class=\\"token comment\\">#日志格式设定</span>\\n        log_format access <span class=\\"token string\\">'$remote_addr - $remote_user [$time_local] \\"$request\\" '</span> <span class=\\"token string\\">'$status $body_bytes_sent \\"$http_referer\\" '</span> <span class=\\"token string\\">'\\"$http_user_agent\\" $http_x_forwarded_for'</span><span class=\\"token punctuation\\">;</span>\\n\\n        <span class=\\"token comment\\">#定义本虚拟主机的访问日志</span>\\n        access_log /var/log/nginx/ha97access.log access<span class=\\"token punctuation\\">;</span>\\n\\n        <span class=\\"token comment\\">#对 \\"/\\" 启用反向代理</span>\\n        location / <span class=\\"token punctuation\\">{</span>\\n            proxy_pass http://127.0.0.1:88<span class=\\"token punctuation\\">;</span>\\n            proxy_redirect off<span class=\\"token punctuation\\">;</span>\\n            proxy_set_header X-Real-IP <span class=\\"token variable\\">$remote_addr</span><span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token comment\\">#后端的 Web 服务器可以通过 X-Forwarded-For 获取用户真实 IP</span>\\n            proxy_set_header X-Forwarded-For <span class=\\"token variable\\">$proxy_add_x_forwarded_for</span><span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token comment\\">#以下是一些反向代理的配置，可选。</span>\\n            proxy_set_header Host <span class=\\"token variable\\">$host</span><span class=\\"token punctuation\\">;</span>\\n            client_max_body_size 10m<span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">#允许客户端请求的最大单文件字节数</span>\\n            client_body_buffer_size 128k<span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">#缓冲区代理缓冲用户端请求的最大字节数，</span>\\n\\n            <span class=\\"token comment\\">##代理设置 以下设置是 nginx 和后端服务器之间通讯的设置##</span>\\n            proxy_connect_timeout <span class=\\"token number\\">90</span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">#nginx 跟后端服务器连接超时时间（代理连接超时）</span>\\n            proxy_send_timeout <span class=\\"token number\\">90</span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">#后端服务器数据回传时间（代理发送超时）</span>\\n            proxy_read_timeout <span class=\\"token number\\">90</span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">#连接成功后，后端服务器响应时间（代理接收超时）</span>\\n            proxy_buffering on<span class=\\"token punctuation\\">;</span>    <span class=\\"token comment\\">#该指令开启从后端被代理服务器的响应内容缓冲 此参数开启后 proxy_buffers 和 proxy_busy_buffers_size 参数才会起作用</span>\\n            proxy_buffer_size 4k<span class=\\"token punctuation\\">;</span>  <span class=\\"token comment\\">#设置代理服务器（nginx）保存用户头信息的缓冲区大小</span>\\n            proxy_buffers <span class=\\"token number\\">4</span> 32k<span class=\\"token punctuation\\">;</span>   <span class=\\"token comment\\">#proxy_buffers 缓冲区，网页平均在 32k 以下的设置</span>\\n            proxy_busy_buffers_size 64k<span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">#高负荷下缓冲大小（proxy_buffers*2）</span>\\n            proxy_max_temp_file_size 2048m<span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">#默认 1024m, 该指令用于设置当网页内容大于 proxy_buffers 时，临时文件大小的最大值。如果文件大于这个值，它将从 upstream 服务器同步地传递请求，而不是缓冲到磁盘</span>\\n            proxy_temp_file_write_size 512k<span class=\\"token punctuation\\">;</span> 这是当被代理服务器的响应过大时 nginx 一次性写入临时文件的数据量。\\n            proxy_temp_path  /var/tmp/nginx/proxy_temp<span class=\\"token punctuation\\">;</span>    <span class=\\"token comment\\">##定义缓冲存储目录，之前必须要先手动创建此目录</span>\\n            proxy_headers_hash_max_size <span class=\\"token number\\">51200</span><span class=\\"token punctuation\\">;</span>\\n            proxy_headers_hash_bucket_size <span class=\\"token number\\">6400</span><span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token comment\\">#######################################################</span>\\n        <span class=\\"token punctuation\\">}</span>\\n\\n        <span class=\\"token comment\\">#设定查看 nginx 状态的地址</span>\\n        location /nginxStatus <span class=\\"token punctuation\\">{</span>\\n            stub_status on<span class=\\"token punctuation\\">;</span>\\n            access_log on<span class=\\"token punctuation\\">;</span>\\n            auth_basic <span class=\\"token string\\">\\"nginxStatus\\"</span><span class=\\"token punctuation\\">;</span>\\n            auth_basic_user_file conf/htpasswd<span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token comment\\">#htpasswd 文件的内容可以用 apache 提供的 htpasswd 工具来产生。</span>\\n        <span class=\\"token punctuation\\">}</span>\\n\\n        <span class=\\"token comment\\">#本地动静分离反向代理配置</span>\\n        <span class=\\"token comment\\">#所有 jsp 的页面均交由 tomcat 或 resin 处理</span>\\n        location ~ .<span class=\\"token punctuation\\">(</span>jsp<span class=\\"token operator\\">|</span>jspx<span class=\\"token operator\\">|</span><span class=\\"token keyword\\">do</span><span class=\\"token punctuation\\">)</span>?$ <span class=\\"token punctuation\\">{</span>\\n            proxy_set_header Host <span class=\\"token variable\\">$host</span><span class=\\"token punctuation\\">;</span>\\n            proxy_set_header X-Real-IP <span class=\\"token variable\\">$remote_addr</span><span class=\\"token punctuation\\">;</span>\\n            proxy_set_header X-Forwarded-For <span class=\\"token variable\\">$proxy_add_x_forwarded_for</span><span class=\\"token punctuation\\">;</span>\\n            proxy_pass http://127.0.0.1:8080<span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span>\\n\\n        <span class=\\"token comment\\">#所有静态文件由 nginx 直接读取不经过 tomcat 或 resin</span>\\n        location ~ .*.<span class=\\"token punctuation\\">(</span>htm<span class=\\"token operator\\">|</span>html<span class=\\"token operator\\">|</span>gif<span class=\\"token operator\\">|</span>jpg<span class=\\"token operator\\">|</span>jpeg<span class=\\"token operator\\">|</span>png<span class=\\"token operator\\">|</span>bmp<span class=\\"token operator\\">|</span>swf<span class=\\"token operator\\">|</span>ioc<span class=\\"token operator\\">|</span><span class=\\"token function\\">rar</span><span class=\\"token operator\\">|</span><span class=\\"token function\\">zip</span><span class=\\"token operator\\">|</span>txt<span class=\\"token operator\\">|</span>flv<span class=\\"token operator\\">|</span>mid<span class=\\"token operator\\">|</span>doc<span class=\\"token operator\\">|</span>ppt<span class=\\"token operator\\">|</span>pdf<span class=\\"token operator\\">|</span>xls<span class=\\"token operator\\">|</span>mp3<span class=\\"token operator\\">|</span>wma<span class=\\"token punctuation\\">)</span>$\\n        <span class=\\"token punctuation\\">{</span> expires 15d<span class=\\"token punctuation\\">;</span> <span class=\\"token punctuation\\">}</span>\\n\\n        location ~ .*.<span class=\\"token punctuation\\">(</span>js<span class=\\"token operator\\">|</span>css<span class=\\"token punctuation\\">)</span>?$\\n        <span class=\\"token punctuation\\">{</span> expires 1h<span class=\\"token punctuation\\">;</span> <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","copyright":{},"autoDesc":true}`);export{n as data};

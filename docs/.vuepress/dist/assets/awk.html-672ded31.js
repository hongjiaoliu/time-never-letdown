import{_ as e,V as i,W as l,Z as n,X as a,Y as s}from"./framework-bcbeea85.js";const t={},d=n(`<h1 id="基本-三剑客-awk" tabindex="-1"><a class="header-anchor" href="#基本-三剑客-awk" aria-hidden="true">#</a> 基本 | 三剑客-awk</h1><h2 id="_1-awk简介" tabindex="-1"><a class="header-anchor" href="#_1-awk简介" aria-hidden="true">#</a> 1. awk简介</h2><p>awk是Linux系统中一种强大的文本处理工具,可以对文本和数据进行格式化处理。awk会将输入的文件或标准输入中的每一行都看作一个记录,然后按指定方式处理文本和数据。</p><h2 id="_2-awk基本用法" tabindex="-1"><a class="header-anchor" href="#_2-awk基本用法" aria-hidden="true">#</a> 2. awk基本用法</h2><p>awk的基本语法格式如下: awk &#39;pattern { action }&#39; file</p><ul><li><p>pattern表示awk在数据中查找的内容,pattern可以是正则表达式。</p></li><li><p>action是在找到匹配内容时所执行的一系列命令。</p></li><li><p>file表示要处理的文件。 示例:找出/etc/passwd文件中 UID 小于1000的用户</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">awk</span> -F: <span class="token string">&#39;$3 &lt; 1000 {print $1}&#39;</span> /etc/passwd
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这个命令中,-F指定了字段分隔符为冒号,:。$3表示第3个字段,也就是UID。$1表示用户名。所以这个命令的效果是打印出/etc/passwd文件中UID小于1000的用户名。</p></li></ul><h2 id="_3-awk内置变量" tabindex="-1"><a class="header-anchor" href="#_3-awk内置变量" aria-hidden="true">#</a> 3. awk内置变量</h2><p>awk有一些内置变量,可以直接在command action中使用:</p>`,8),r=a("ul",null,[a("li",null,[a("p",null,"NR:表示当前记录Number,即行号")]),a("li",null,[a("p",null,"NF:表示当前记录的字段总数(列数)")]),a("li",null,[a("p",null,"$0:表示整条记录的内容")]),a("li",null,[a("p",null,[a("span",{class:"katex"},[a("span",{class:"katex-mathml"},[a("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[a("semantics",null,[a("mrow",null,[a("mn",null,"1"),a("mo",null,"−")]),a("annotation",{encoding:"application/x-tex"},"1-")])])]),a("span",{class:"katex-html","aria-hidden":"true"},[a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.7278em","vertical-align":"-0.0833em"}}),a("span",{class:"mord"},"1"),a("span",{class:"mord"},"−")])])]),s("n:表示当前记录的第n个字段")])]),a("li",null,[a("p",null,"FS:字段分隔符,默认是空格 示例:打印每个用户的UID和用户名"),a("div",{class:"language-bash line-numbers-mode","data-ext":"sh"},[a("pre",{class:"language-bash"},[a("code",null,[a("span",{class:"token function"},"awk"),s(),a("span",{class:"token parameter variable"},"-F"),s(),a("span",{class:"token string"},"':'"),s(),a("span",{class:"token string"},`'{ print $1,"[",$3,"]" }'`),s(` /etc/passwd
`)])]),a("div",{class:"line-numbers","aria-hidden":"true"},[a("div",{class:"line-number"})])])])],-1),c=n(`<h2 id="_4-awk条件过滤" tabindex="-1"><a class="header-anchor" href="#_4-awk条件过滤" aria-hidden="true">#</a> 4. awk条件过滤</h2><p>可以使用一些条件过滤来选择处理哪些行:</p><ul><li><p>/正则表达式/:匹配正则表达式的行</p></li><li><p>关系表达式:结果为真的行,如 $3 &gt; 1000</p></li><li><p>模式匹配表达式:<sub>表示模式开始。!</sub>表示不匹配模式</p></li><li><p>逻辑运算符:&amp;&amp;(与)、||(或) 示例:找出UID大于1000的用户</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">awk</span> -F: <span class="token string">&#39;$3 &gt; 1000 {print $1}&#39;</span> /etc/passwd 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul><h2 id="_5-awk统计求和" tabindex="-1"><a class="header-anchor" href="#_5-awk统计求和" aria-hidden="true">#</a> 5. awk统计求和</h2><p>awk可以进行数值的统计和求和操作。</p>`,5),p=a("ul",null,[a("li",{print:"",NR:""},[a("p",null,"统计行数:END")]),a("li",null,[a("p",null,"求和:END { print sum } 示例:统计/etc/passwd文件中用户数"),a("div",{class:"language-bash line-numbers-mode","data-ext":"sh"},[a("pre",{class:"language-bash"},[a("code",null,[a("span",{class:"token function"},"awk"),s(),a("span",{class:"token string"},"'END { print NR }'"),s(` /etc/passwd
`)])]),a("div",{class:"line-numbers","aria-hidden":"true"},[a("div",{class:"line-number"})])])])],-1),o=n(`<p>求和每个用户的UID:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">awk</span> -F: <span class="token string">&#39;{sum+=$3} END {print sum}&#39;</span> /etc/passwd
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="_6-awk进阶" tabindex="-1"><a class="header-anchor" href="#_6-awk进阶" aria-hidden="true">#</a> 6. awk进阶</h2><p>awk还提供了更多高级功能,如数组、循环等。</p><ul><li><p>数组:awk中数组的索引可以是数字也可以是字符串</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">awk</span> <span class="token string">&#39;{array[$1] = $2} END {for (i in array) {print i, array[i]}}&#39;</span> <span class="token function">file</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>循环:awk支持while、do...while、for循环</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">awk</span> <span class="token string">&#39;{ i = 1; while (i &lt;= 3) {print $1} i++ }&#39;</span> <span class="token function">file</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>通过数组和循环,可以进行更复杂的数据统计。awk是Linux中非常强大的数据处理工具。熟练掌握awk,可以大大提高工作效率。</p></li></ul><h2 id="_7-awk统计分组" tabindex="-1"><a class="header-anchor" href="#_7-awk统计分组" aria-hidden="true">#</a> 7. awk统计分组</h2><p>awk可以通过关联数组(Associative Arrays)来进行数据分组统计。 示例:统计/etc/passwd每个shell的用户数量 bash</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">awk</span> -F<span class="token string">&#39;:&#39;</span> <span class="token string">&#39;{shells[$7]++} END{for(i in shells) print i, shells[i]}&#39;</span> /etc/passwd
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>上例通过shells数组收集了每个shell对应的用户数量,END block打印出结果。</p><h2 id="_8-awk格式化输出" tabindex="-1"><a class="header-anchor" href="#_8-awk格式化输出" aria-hidden="true">#</a> 8. awk格式化输出</h2><p>awk可以用print进行格式化输出。</p><ul><li><p>print:默认输出方式</p></li><li><p>printf格式化输出:格式符有%s %d %f等 示例:格式化输出/etc/passwd的用户信息 bash</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">awk</span> -F<span class="token string">&#39;:&#39;</span> <span class="token string">&#39;{ printf &quot;Username: %s, UID: %s, Home: %s\\n&quot;, $1, $3, $6 }&#39;</span> /etc/passwd
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul><h2 id="_9-awk结合shell" tabindex="-1"><a class="header-anchor" href="#_9-awk结合shell" aria-hidden="true">#</a> 9. awk结合Shell</h2><p>awk可以和Shell结合使用:</p><ul><li><p>命令替代:用awk实现grep,wc等功能</p></li><li><p>变量传递:将Shell变量传递给awk 示例:用awk实现wc -l功能</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">awk</span> <span class="token string">&#39;END{print NR}&#39;</span> <span class="token function">file</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>统计文件大小:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">ls</span> <span class="token parameter variable">-l</span> <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">&#39;{sum+=$5} END{print sum}&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul><h2 id="_10-awk进阶示例" tabindex="-1"><a class="header-anchor" href="#_10-awk进阶示例" aria-hidden="true">#</a> 10. awk进阶示例</h2><p>下面是一个awk的复杂示例:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>
<span class="token function">awk</span> -F<span class="token string">&#39;:&#39;</span> <span class="token string">&#39;{
  uid[$3]++; 
  if ($7==&quot;/bin/bash&quot;) bash_users++;
  if ($3&gt;=1000) {high_uid++; sum_highuid+=$3;}
}
END {
  print &quot;Total users:&quot;, NR; 
  print &quot;Total bash users:&quot;, bash_users;
  print &quot;Total UID &gt;= 1000:&quot;, high_uid;
  print &quot;Average UID &gt;= 1000:&quot;, sum_highuid/high_uid;
}&#39;</span> /etc/passwd
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这段代码统计了:总用户数、bash用户数、UID大于等于1000的用户数和平均值。 awk是一个非常强大和高效的文本处理工具,掌握awk对提高工作效率很有帮助。需要通过大量的练习才能熟练使用。</p><h2 id="_11-awk处理json、xml、csv数据" tabindex="-1"><a class="header-anchor" href="#_11-awk处理json、xml、csv数据" aria-hidden="true">#</a> 11. awk处理json、xml、csv数据</h2><p>awk不仅可以处理文本,也可以处理json、xml、csv等结构化数据。</p><h3 id="处理json数据" tabindex="-1"><a class="header-anchor" href="#处理json数据" aria-hidden="true">#</a> 处理JSON数据</h3><p>可以使用jk库解析json:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">bash</span>
<span class="token function">awk</span> <span class="token string">&#39;
  @include &quot;awk/json.awk&quot;
  @load &quot;json&quot;

  BEGIN{ 
    json = &#39;</span><span class="token punctuation">{</span><span class="token string">&quot;name&quot;</span><span class="token builtin class-name">:</span><span class="token string">&quot;John&quot;</span>, <span class="token string">&quot;age&quot;</span>:30<span class="token punctuation">}</span><span class="token string">&#39;
    json2awk(json)
    print json[&quot;name&quot;], json[&quot;age&quot;]
  }
&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="处理xml数据" tabindex="-1"><a class="header-anchor" href="#处理xml数据" aria-hidden="true">#</a> 处理XML数据</h3><p>使用xk库解析xml:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">awk</span> <span class="token string">&#39;
  @include &quot;awk/xml.awk&quot;
  @load &quot;xml&quot;

  BEGIN {
    xml = &quot;&lt;data&gt;&lt;name&gt;John&lt;/name&gt;&lt;age&gt;30&lt;/age&gt;&lt;/data&gt;&quot;
    doc = xml2awk(xml)
    print doc[&quot;name&quot;][1], doc[&quot;age&quot;][1]
  }
&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="处理csv数据" tabindex="-1"><a class="header-anchor" href="#处理csv数据" aria-hidden="true">#</a> 处理CSV数据</h3><p>设置FS解析csv:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">awk</span> <span class="token string">&#39;
  BEGIN {
    FS=&quot;,&quot; 
  }
  {
    print $1, $2
  } 
&#39;</span> data.csv
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_12-awk结合正则表达式" tabindex="-1"><a class="header-anchor" href="#_12-awk结合正则表达式" aria-hidden="true">#</a> 12. awk结合正则表达式</h2><p>awk的模式中可以使用正则表达式进行复杂匹配:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">awk</span> <span class="token string">&#39;/^[a-z]+/ {print $0}&#39;</span> <span class="token function">file</span> <span class="token comment"># 匹配以小写字母开头的行</span>

<span class="token function">awk</span> <span class="token string">&#39;!/th[eo]n/ {print $0}&#39;</span> <span class="token function">file</span> <span class="token comment"># 不匹配then和theon的行</span>

<span class="token function">awk</span> <span class="token string">&#39;/foo/ &amp;&amp; !/bar/ {print $0}&#39;</span> <span class="token function">file</span> <span class="token comment"># 匹配foo且不匹配bar的行</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>正则表达式让awk的匹配能力大大增强。 熟练使用awk+正则表达式可以在日志或文本处理中大显身手。</p><h2 id="_13-awk结合外部命令" tabindex="-1"><a class="header-anchor" href="#_13-awk结合外部命令" aria-hidden="true">#</a> 13. awk结合外部命令</h2><p>awk可以调用外部Linux命令,结合Linux强大的命令行工具做更复杂的任务。 示例:统计Apache访问日志中前10个IP</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">awk</span> <span class="token string">&#39;{print $1}&#39;</span> access.log <span class="token operator">|</span> <span class="token function">sort</span> <span class="token operator">|</span> <span class="token function">uniq</span> <span class="token parameter variable">-c</span> <span class="token operator">|</span> <span class="token function">sort</span> <span class="token parameter variable">-nr</span> <span class="token operator">|</span> <span class="token function">head</span> <span class="token parameter variable">-10</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这个命令结合了sort、uniq、head等命令。 再例如:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">awk</span> <span class="token string">&#39;{system(&quot;dig +short -x &quot; $1)}&#39;</span> ip.txt
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这个命令通过dig将IP地址反解为域名。</p><h2 id="_14-awk小技巧" tabindex="-1"><a class="header-anchor" href="#_14-awk小技巧" aria-hidden="true">#</a> 14. awk小技巧</h2><p>一些简化awk编程的小技巧:</p>`,42),u=a("ul",null,[a("li",null,[a("p",null,"变量初始化:"),a("div",{class:"language-bash line-numbers-mode","data-ext":"sh"},[a("pre",{class:"language-bash"},[a("code",null,[s("BEGIN"),a("span",{class:"token punctuation"},"{"),s(`
`),a("span",{class:"token assign-left variable"},"count"),a("span",{class:"token operator"},"="),a("span",{class:"token number"},"0"),a("span",{class:"token punctuation"},";"),s(`
`),a("span",{class:"token assign-left variable"},"total"),a("span",{class:"token operator"},"="),a("span",{class:"token number"},"0"),a("span",{class:"token punctuation"},";"),s(`
`),a("span",{class:"token punctuation"},"}"),s(`
`)])]),a("div",{class:"line-numbers","aria-hidden":"true"},[a("div",{class:"line-number"}),a("div",{class:"line-number"}),a("div",{class:"line-number"}),a("div",{class:"line-number"})])])]),a("li",null,[a("p",null,"快速打印:"),a("div",{class:"language-bash line-numbers-mode","data-ext":"sh"},[a("pre",{class:"language-bash"},[a("code",null,[s("print "),a("span",{class:"token variable"},"$0"),s(" 可以简化为 "),a("span",{class:"token punctuation"},"{"),s("print"),a("span",{class:"token punctuation"},"}"),s(`
`)])]),a("div",{class:"line-numbers","aria-hidden":"true"},[a("div",{class:"line-number"})])])]),a("li",{动作:""},[a("p",null,"条件语句: if(条件){动作} 可以简化为 条件")]),a("li",{print:"",$0:""},[a("p",null,"方便调试: 打印变量,{print var} 打印每行内容,")])],-1),h=n(`<h2 id="_15-awk进阶应用" tabindex="-1"><a class="header-anchor" href="#_15-awk进阶应用" aria-hidden="true">#</a> 15. awk进阶应用</h2><p>除了文本处理,awk也可以做一些进阶的系统/网络管理工作。</p><h3 id="系统监控" tabindex="-1"><a class="header-anchor" href="#系统监控" aria-hidden="true">#</a> 系统监控</h3><p>监测系统负载:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">awk</span> <span class="token string">&#39;{print $1 &quot; &quot; $2 &quot; &quot; $3}&#39;</span> /proc/loadavg
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>监测磁盘使用:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">df</span> <span class="token parameter variable">-h</span> <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">&#39;NR!=1{print $5}&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="网络监控" tabindex="-1"><a class="header-anchor" href="#网络监控" aria-hidden="true">#</a> 网络监控</h3><p>监测网站响应时间:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">ping</span> www.example.com <span class="token parameter variable">-c</span> <span class="token number">5</span> <span class="token operator">|</span> <span class="token function">awk</span> -F<span class="token string">&#39;/&#39;</span> <span class="token string">&#39;END{print &quot;Average: &quot; $4}&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>分析Apache日志:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">awk</span> <span class="token string">&#39;{print $1}&#39;</span> /var/log/apache2/access.log <span class="token operator">|</span> <span class="token function">sort</span> <span class="token operator">|</span> <span class="token function">uniq</span> <span class="token parameter variable">-c</span> <span class="token operator">|</span> <span class="token function">sort</span> <span class="token parameter variable">-n</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="系统管理" tabindex="-1"><a class="header-anchor" href="#系统管理" aria-hidden="true">#</a> 系统管理</h3><p>备份配置文件:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">awk</span> <span class="token string">&#39;{print &quot;&gt; &quot; $0}&#39;</span> /etc/nginx/nginx.conf <span class="token operator">&gt;</span> nginx.conf.bak
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="日志分析" tabindex="-1"><a class="header-anchor" href="#日志分析" aria-hidden="true">#</a> 日志分析</h3><p>分析SSH失败登录:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">awk</span> <span class="token string">&#39;/Failed/{print $1 &quot; &quot; $2 &quot; &quot; $3}&#39;</span> /var/log/auth.log
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这些都是awk在系统/网络管理方面的典型应用。熟练掌握awk,对运维工程师非常有帮助。awk允许你用简单的方式完成很多任务。</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>awk是一个非常强大和高效的文本处理语言,熟练掌握awk,运用自如,对Linux系统管理/运维非常有帮助。awk值得你投入时间学习与实践。</p>`,21),v=[d,r,c,p,o,u,h];function k(b,m){return i(),l("div",null,v)}const w=e(t,[["render",k],["__file","awk.html.vue"]]);export{w as default};

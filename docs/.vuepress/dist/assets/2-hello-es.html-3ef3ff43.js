import{_ as a,V as n,W as s,Z as t}from"./framework-bcbeea85.js";const e={},o=t(`<h1 id="_2-使用入门" tabindex="-1"><a class="header-anchor" href="#_2-使用入门" aria-hidden="true">#</a> 2-使用入门</h1><p>前面介绍说，Elasticsearch 都是通过 REST API 接口来操作数据的，那么下面接通过几个接口的请求来演示它的使用。（当前虚拟机IP为192.168.163.131）</p><h1 id="cat" tabindex="-1"><a class="header-anchor" href="#cat" aria-hidden="true">#</a> _cat</h1><h2 id="_1-cat-nodes-查看所有节点" tabindex="-1"><a class="header-anchor" href="#_1-cat-nodes-查看所有节点" aria-hidden="true">#</a> 1. /_cat/nodes：查看所有节点</h2><p>接口：<code>GET http://192.168.163.131:9200/_cat/nodes</code><img src="https://cdn.liuhongjiao.cn/images/2023/02/15/2-hello-es/1676425453047.png" alt="图 1" loading="lazy"></p><h2 id="_2-cat-health-查看es健康状况" tabindex="-1"><a class="header-anchor" href="#_2-cat-health-查看es健康状况" aria-hidden="true">#</a> 2. /_cat/health：查看ES健康状况</h2><p>接口：<code>GET http://192.168.163.131:9200/_cat/health</code><img src="https://cdn.liuhongjiao.cn/images/2023/02/15/2-hello-es/1676425465660.png" alt="图 2" loading="lazy"></p><h2 id="_3-cat-master-查看主节点信息" tabindex="-1"><a class="header-anchor" href="#_3-cat-master-查看主节点信息" aria-hidden="true">#</a> 3. /_cat/master：查看主节点信息</h2><p>接口：<code>GET http://192.168.163.131:9200/_cat/master</code><img src="https://cdn.liuhongjiao.cn/images/2023/02/15/2-hello-es/1676425477555.png" alt="图 3" loading="lazy"></p><h2 id="_4-cat-indicies-查看所有索引" tabindex="-1"><a class="header-anchor" href="#_4-cat-indicies-查看所有索引" aria-hidden="true">#</a> 4. /_cat/indicies：查看所有索引</h2><blockquote><p>等价于 mysql 数据库的 show databases;</p></blockquote><p>接口：<code>GET http://192.168.163.131:9200/_cat/indices</code><img src="https://cdn.liuhongjiao.cn/images/2023/02/15/2-hello-es/1676425496050.png" alt="图 4" loading="lazy"></p><h1 id="索引一个文档" tabindex="-1"><a class="header-anchor" href="#索引一个文档" aria-hidden="true">#</a> 索引一个文档</h1><p>即保存一条数据，保存在哪个索引的哪个类型下，指定用哪个唯一标识。</p><h2 id="_1-put-请求" tabindex="-1"><a class="header-anchor" href="#_1-put-请求" aria-hidden="true">#</a> 1. PUT 请求</h2><p>接口：<code>PUT http://192.168.163.131:9200/customer/external/1</code><img src="https://cdn.liuhongjiao.cn/images/2023/02/15/2-hello-es/1676425511027.png" alt="图 5" loading="lazy"></p><h2 id="_2-post-请求" tabindex="-1"><a class="header-anchor" href="#_2-post-请求" aria-hidden="true">#</a> 2. POST 请求</h2><p>接口：<code>POST http://192.168.163.131:9200/customer/external/</code><img src="https://cdn.liuhongjiao.cn/images/2023/02/15/2-hello-es/1676425523830.png" alt="图 6" loading="lazy"></p><p>PUT和POST都可以</p><ul><li>POST新增，如果不指定id，会自动生成id。指定id就会修改这个数据，并新增版本号；</li><li>PUT可以新增也可以修改。PUT必须指定id；由于PUT需要指定id，我们一般用来做修改操作，不指定id会报错。</li></ul><h1 id="查看文档" tabindex="-1"><a class="header-anchor" href="#查看文档" aria-hidden="true">#</a> 查看文档</h1><h2 id="index-type-id" tabindex="-1"><a class="header-anchor" href="#index-type-id" aria-hidden="true">#</a> /index/type/id</h2><p>接口：<code>GET http://192.168.163.131:9200/customer/external/1</code><img src="https://cdn.liuhongjiao.cn/images/2023/02/15/2-hello-es/1676425535913.png" alt="图 7" loading="lazy"></p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
    <span class="token property">&quot;_index&quot;</span><span class="token operator">:</span> <span class="token string">&quot;customer&quot;</span><span class="token punctuation">,</span>  # 在哪个索引(库)
    <span class="token property">&quot;_type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;external&quot;</span><span class="token punctuation">,</span>   # 在哪个类型(表)
    <span class="token property">&quot;_id&quot;</span><span class="token operator">:</span> <span class="token string">&quot;1&quot;</span><span class="token punctuation">,</span>						 # 文档id(记录)
    <span class="token property">&quot;_version&quot;</span><span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span>				 # 版本号
    <span class="token property">&quot;_seq_no&quot;</span><span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span>					 # 并发控制字段，每次更新都会+<span class="token number">1</span>，用来做乐观锁
    <span class="token property">&quot;_primary_term&quot;</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>		 # 同上，主分片重新分配，如重启，就会变化
    <span class="token property">&quot;found&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token property">&quot;_source&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>					 # 数据
        <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;zhangsan&quot;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

# 乐观锁更新时携带 ?_seq_no=<span class="token number">0</span>&amp;_primary_term=<span class="token number">1</span>  当携带数据与实际值不匹配时更新失败
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="更新文档" tabindex="-1"><a class="header-anchor" href="#更新文档" aria-hidden="true">#</a> 更新文档</h1><h2 id="index-type-id-update" tabindex="-1"><a class="header-anchor" href="#index-type-id-update" aria-hidden="true">#</a> /index/type/id/_update</h2><p>接口：<code>POST http://192.168.163.131:9200/customer/external/1/_update</code><img src="https://cdn.liuhongjiao.cn/images/2023/02/15/2-hello-es/1676425548833.png" alt="图 8" loading="lazy"></p><h2 id="几种更新文档的区别" tabindex="-1"><a class="header-anchor" href="#几种更新文档的区别" aria-hidden="true">#</a> 几种更新文档的区别</h2><p>在上面索引文档即保存文档的时候介绍，还有两种更新文档的方式：</p><ul><li>当PUT请求带id，且有该id数据存在时，会更新文档；</li><li>当POST请求带id，与PUT相同，该id数据已经存在时，会更新文档；</li></ul><p>这两种请求类似，即带id，且数据存在，就会执行更新操作。 类比：</p><ul><li>请求体的报文格式不同，_update方式要修改的数据要包裹在 doc 键下</li><li>_update方式不会重复更新，数据已存在不会更新，版本号不会改变，另两种方式会重复更新（覆盖原来数据），版本号会改变</li><li>这几种方式在更新时都可以增加属性，PUT请求带id更新和POST请求带id更新，会直接覆盖原来的数据，不会在原来的属性里面新增属性</li></ul><h1 id="删除文档-索引" tabindex="-1"><a class="header-anchor" href="#删除文档-索引" aria-hidden="true">#</a> 删除文档&amp;索引</h1><h2 id="删除文档" tabindex="-1"><a class="header-anchor" href="#删除文档" aria-hidden="true">#</a> 删除文档</h2><p>接口：<code>DELETE http://192.168.163.131:9200/customer/external/1</code><img src="https://cdn.liuhongjiao.cn/images/2023/02/15/2-hello-es/1676425563324.png" alt="图 9" loading="lazy"></p><h2 id="删除索引" tabindex="-1"><a class="header-anchor" href="#删除索引" aria-hidden="true">#</a> 删除索引</h2><p>接口：<code>DELETE http://192.168.163.131:9200/customer</code><img src="https://cdn.liuhongjiao.cn/images/2023/02/15/2-hello-es/1676425572501.png" alt="图 10" loading="lazy"></p><h1 id="bulk-批量操作数据" tabindex="-1"><a class="header-anchor" href="#bulk-批量操作数据" aria-hidden="true">#</a> bulk-批量操作数据</h1><p>语法格式：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>action<span class="token operator">:</span><span class="token punctuation">{</span>metadata<span class="token punctuation">}</span><span class="token punctuation">}</span>\\n   <span class="token comment">// 例如index保存记录，update更新</span>
<span class="token punctuation">{</span>request body  <span class="token punctuation">}</span>\\n

<span class="token punctuation">{</span>action<span class="token operator">:</span><span class="token punctuation">{</span>metadata<span class="token punctuation">}</span><span class="token punctuation">}</span>\\n
<span class="token punctuation">{</span>request body  <span class="token punctuation">}</span>\\n
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_1-指定索引和类型的批量操作" tabindex="-1"><a class="header-anchor" href="#_1-指定索引和类型的批量操作" aria-hidden="true">#</a> 1. 指定索引和类型的批量操作</h2><p>接口：<code>POST /customer/external/_bulk</code> 参数：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span><span class="token property">&quot;index&quot;</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token property">&quot;_id&quot;</span><span class="token operator">:</span><span class="token string">&quot;1&quot;</span><span class="token punctuation">}</span><span class="token punctuation">}</span>
<span class="token punctuation">{</span><span class="token property">&quot;name&quot;</span><span class="token operator">:</span><span class="token string">&quot;John Doe&quot;</span><span class="token punctuation">}</span>
<span class="token punctuation">{</span><span class="token property">&quot;index&quot;</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token property">&quot;_id&quot;</span><span class="token operator">:</span><span class="token string">&quot;2&quot;</span><span class="token punctuation">}</span><span class="token punctuation">}</span>
<span class="token punctuation">{</span><span class="token property">&quot;name&quot;</span><span class="token operator">:</span><span class="token string">&quot;John Doe&quot;</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在Kibana中使用dev-tools测试批量： <img src="https://cdn.liuhongjiao.cn/images/2023/02/15/2-hello-es/1676425609453.png" alt="图 12" loading="lazy"></p><h2 id="_2-对所有索引执行批量操作" tabindex="-1"><a class="header-anchor" href="#_2-对所有索引执行批量操作" aria-hidden="true">#</a> 2. 对所有索引执行批量操作</h2><p>接口：<code>POST /_bulk</code> 参数：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span><span class="token property">&quot;delete&quot;</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token property">&quot;_index&quot;</span><span class="token operator">:</span><span class="token string">&quot;website&quot;</span><span class="token punctuation">,</span><span class="token property">&quot;_type&quot;</span><span class="token operator">:</span><span class="token string">&quot;blog&quot;</span><span class="token punctuation">,</span><span class="token property">&quot;_id&quot;</span><span class="token operator">:</span><span class="token string">&quot;123&quot;</span><span class="token punctuation">}</span><span class="token punctuation">}</span>
<span class="token punctuation">{</span><span class="token property">&quot;create&quot;</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token property">&quot;_index&quot;</span><span class="token operator">:</span><span class="token string">&quot;website&quot;</span><span class="token punctuation">,</span><span class="token property">&quot;_type&quot;</span><span class="token operator">:</span><span class="token string">&quot;blog&quot;</span><span class="token punctuation">,</span><span class="token property">&quot;_id&quot;</span><span class="token operator">:</span><span class="token string">&quot;123&quot;</span><span class="token punctuation">}</span><span class="token punctuation">}</span>
<span class="token punctuation">{</span><span class="token property">&quot;title&quot;</span><span class="token operator">:</span><span class="token string">&quot;my first blog post&quot;</span><span class="token punctuation">}</span>
<span class="token punctuation">{</span><span class="token property">&quot;index&quot;</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token property">&quot;_index&quot;</span><span class="token operator">:</span><span class="token string">&quot;website&quot;</span><span class="token punctuation">,</span><span class="token property">&quot;_type&quot;</span><span class="token operator">:</span><span class="token string">&quot;blog&quot;</span><span class="token punctuation">}</span><span class="token punctuation">}</span>
<span class="token punctuation">{</span><span class="token property">&quot;title&quot;</span><span class="token operator">:</span><span class="token string">&quot;my second blog post&quot;</span><span class="token punctuation">}</span>
<span class="token punctuation">{</span><span class="token property">&quot;update&quot;</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token property">&quot;_index&quot;</span><span class="token operator">:</span><span class="token string">&quot;website&quot;</span><span class="token punctuation">,</span><span class="token property">&quot;_type&quot;</span><span class="token operator">:</span><span class="token string">&quot;blog&quot;</span><span class="token punctuation">,</span><span class="token property">&quot;_id&quot;</span><span class="token operator">:</span><span class="token string">&quot;123&quot;</span><span class="token punctuation">}</span><span class="token punctuation">}</span>
<span class="token punctuation">{</span><span class="token property">&quot;doc&quot;</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token property">&quot;title&quot;</span><span class="token operator">:</span><span class="token string">&quot;my updated blog post&quot;</span><span class="token punctuation">}</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://cdn.liuhongjiao.cn/images/2023/02/15/2-hello-es/1676425624022.png" alt="图 13" tabindex="0" loading="lazy"><figcaption>图 13</figcaption></figure><ul><li>这里的批量操作，当发生某一条执行发生失败时，其他的数据仍然能够接着执行，也就是说彼此之间是独立的。</li><li>bulk api以此按顺序执行所有的action（动作）。如果一个单个的动作因任何原因失败，它将继续处理它后面剩余的动作。</li><li>当bulk api返回时，它将提供每个动作的状态（与发送的顺序相同），所以您可以检查是否一个指定的动作是否失败了。</li></ul>`,49),p=[o];function i(c,l){return n(),s("div",null,p)}const u=a(e,[["render",i],["__file","2-hello-es.html.vue"]]);export{u as default};

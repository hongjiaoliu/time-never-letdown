import{_ as i,V as t,W as s,X as r,Y as e,$ as o,Z as l,F as a}from"./framework-e5211252.js";const c={},d=l(`<h1 id="chrome-85-referer-丢失部分参数" tabindex="-1"><a class="header-anchor" href="#chrome-85-referer-丢失部分参数" aria-hidden="true">#</a> Chrome 85+ Referer 丢失部分参数</h1><blockquote></blockquote><p>Chrome85 的 referer 策略修改 原本默认的 referer 策略（policy）是no-referrer-when-downgrade，即允许referer带上来源页面地址上的请求参数，Chrome85+将策略修改为strict-origin-when-cross-origin，即如果请求地址与请求页面非同源，将只携带请求的域名，不会再带上来源页面地址的请求参数。 那如何解决呢，可以在html里设置</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code>&lt;metaname=&quot;referrer&quot;content**=**&quot;no-referrer-when-downgrade&quot;/&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>也可以在nginx设置header，这样就不用重新上线了</p><div class="language-ngnix line-numbers-mode" data-ext="ngnix"><pre class="language-ngnix"><code>add_header Referrer-Policy no-referrer-when-downgrade;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>总结：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code>Syntax
Referrer-Policy: no-referrer
Referrer-Policy: no-referrer-when-downgrade
Referrer-Policy: origin
Referrer-Policy: origin-when-cross-origin
Referrer-Policy: same-origin
Referrer-Policy: strict-origin
Referrer-Policy: strict-origin-when-cross-origin
Referrer-Policy: unsafe-url
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,8),h=r("strong",null,"no-referrer",-1),g={href:"https://link.zhihu.com/?target=https%3A//developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Referer",target:"_blank",rel:"noopener noreferrer"},m=r("strong",null,"no-referrer-when-downgrade （默认值）",-1),u=r("strong",null,"origin",-1),_={href:"https://link.zhihu.com/?target=https%3A//example.com/page.html",target:"_blank",rel:"noopener noreferrer"},f={href:"https://link.zhihu.com/?target=https%3A//example.com/",target:"_blank",rel:"noopener noreferrer"},p=r("strong",null,"origin-when-cross-origin",-1),v=r("strong",null,"same-origin",-1),b={href:"https://link.zhihu.com/?target=https%3A//developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy",target:"_blank",rel:"noopener noreferrer"},T=r("strong",null,"strict-origin",-1),P=r("strong",null,"strict-origin-when-cross-origin",-1),x=r("strong",null,"unsafe-url",-1),R=r("figure",null,[r("img",{src:"https://cdn.liuhongjiao.cn/images/2023/02/16/20220426-chrome85-referer-lost/1676511250114.png",alt:"图 1",tabindex:"0",loading:"lazy"}),r("figcaption",null,"图 1")],-1);function w(k,y){const n=a("ExternalLinkIcon");return t(),s("div",null,[d,r("p",null,[h,e(" 整个 "),r("a",g,[e("Referer"),o(n)]),e(" 首部会被移除。访问来源信息不随着请求一起发送 "),m,e(" 在没有指定任何策略的情况下用户代理的默认行为。在同等安全级别的情况下，引用页面的地址会被发送(HTTPS->HTTPS)，但是在降级的情况下不会被发送 (HTTPS->HTTP)。 "),u,e(" 在任何情况下，仅发送文件的源作为引用地址。例如 "),r("a",_,[e("https://example.com/page.html"),o(n)]),e(" 会将 "),r("a",f,[e("https://example.com/"),o(n)]),e(" 作为引用地址。 "),p,e(" 对于同源的请求，会发送完整的URL作为引用地址，但是对于非同源请求仅发送文件的源。 "),v,e(" 对于"),r("a",b,[e("同源的请求"),o(n)]),e("会发送引用地址，但是对于非同源请求则不发送引用地址信息 "),T,e(" 在同等安全级别的情况下，发送文件的源作为引用地址(HTTPS->HTTPS)，但是在降级的情况下不会发送 (HTTPS->HTTP)。 "),P,e(" 对于同源的请求，会发送完整的URL作为引用地址；在同等安全级别的情况下，发送文件的源作为引用地址(HTTPS->HTTPS)；在降级的情况下不发送此首部 (HTTPS->HTTP)。 "),x,e(" 无论是同源请求还是非同源请求，都发送完整的 URL（移除参数信息之后）作为引用地址。（最不安全的策略了）")]),R])}const S=i(c,[["render",w],["__file","20220426-chrome85-referer-lost.html.vue"]]);export{S as default};

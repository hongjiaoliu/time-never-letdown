import{_ as t,V as c,W as o,X as a,Y as n,$ as e,Z as p,F as l}from"./framework-bcbeea85.js";const i={},u=p('<h1 id="_3-dubbo-中的扩展点加载机制" tabindex="-1"><a class="header-anchor" href="#_3-dubbo-中的扩展点加载机制" aria-hidden="true">#</a> 3-Dubbo 中的扩展点加载机制</h1><h2 id="扩展点配置" tabindex="-1"><a class="header-anchor" href="#扩展点配置" aria-hidden="true">#</a> 扩展点配置</h2><h3 id="来源" tabindex="-1"><a class="header-anchor" href="#来源" aria-hidden="true">#</a> 来源：</h3><p>Dubbo 的扩展点加载从 JDK 标准的 SPI (Service Provider Interface) 扩展点发现机制加强而来。 Dubbo 改进了 JDK 标准的 SPI 的以下问题：</p><ul><li>JDK 标准的 SPI 会一次性实例化扩展点所有实现，如果有扩展实现初始化很耗时，但如果没用上也加载，会很浪费资源。</li><li>如果扩展点加载失败，连扩展点的名称都拿不到了。比如：JDK 标准的 ScriptEngine，通过 getName() 获取脚本类型的名称，但如果 RubyScriptEngine 因为所依赖的 jruby.jar 不存在，导致 RubyScriptEngine 类加载失败，这个失败原因被吃掉了，和 ruby 对应不起来，当用户执行 ruby 脚本时，会报不支持 ruby，而不是真正失败的原因。</li><li>增加了对扩展点 IoC 和 AOP 的支持，一个扩展点可以直接 setter 注入其它扩展点。</li></ul><h3 id="约定" tabindex="-1"><a class="header-anchor" href="#约定" aria-hidden="true">#</a> 约定：</h3>',6),r={href:"https://dubbo.apache.org/zh/docs/v2.7/dev/spi/#fn:1",target:"_blank",rel:"noopener noreferrer"},d=p(`<h3 id="示例" tabindex="-1"><a class="header-anchor" href="#示例" aria-hidden="true">#</a> 示例：</h3><p>以扩展 Dubbo 的协议为例，在协议的实现 jar 包内放置文本文件：META-INF/dubbo/org.apache.dubbo.rpc.Protocol，内容为：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token assign-left variable">xxx</span><span class="token operator">=</span>com.alibaba.xxx.XxxProtocol
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>实现类内容</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>xxx</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>dubbo<span class="token punctuation">.</span>rpc<span class="token punctuation">.</span></span><span class="token class-name">Protocol</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">XxxProtocol</span> <span class="token keyword">implements</span> <span class="token class-name">Protocol</span> <span class="token punctuation">{</span> 
    <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="配置模块中的配置" tabindex="-1"><a class="header-anchor" href="#配置模块中的配置" aria-hidden="true">#</a> 配置模块中的配置</h3><p>Dubbo 配置模块中，扩展点均有对应配置属性或标签，通过配置指定使用哪个扩展实现。比如：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">dubbo:</span>protocol</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>xxx<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="扩展点特性" tabindex="-1"><a class="header-anchor" href="#扩展点特性" aria-hidden="true">#</a> 扩展点特性</h2><h3 id="扩展点自动包装" tabindex="-1"><a class="header-anchor" href="#扩展点自动包装" aria-hidden="true">#</a> 扩展点自动包装</h3><p>自动包装扩展点的 Wrapper 类。ExtensionLoader 在加载扩展点时，如果加载到的扩展点有拷贝构造函数，则判定为扩展点 Wrapper 类。 Wrapper类内容：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>xxx</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>dubbo<span class="token punctuation">.</span>rpc<span class="token punctuation">.</span></span><span class="token class-name">Protocol</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">XxxProtocolWrapper</span> <span class="token keyword">implements</span> <span class="token class-name">Protocol</span> <span class="token punctuation">{</span>
    <span class="token class-name">Protocol</span> impl<span class="token punctuation">;</span>
    
    <span class="token keyword">public</span> <span class="token class-name">XxxProtocolWrapper</span><span class="token punctuation">(</span><span class="token class-name">Protocol</span> protocol<span class="token punctuation">)</span> <span class="token punctuation">{</span> impl <span class="token operator">=</span> protocol<span class="token punctuation">;</span> <span class="token punctuation">}</span>
    
    <span class="token comment">// 接口方法做一个操作后，再调用extension的方法</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">refer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//... 一些操作</span>
        impl<span class="token punctuation">.</span><span class="token function">refer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// ... 一些操作</span>
    <span class="token punctuation">}</span>
    
    <span class="token operator">/</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Wrapper 类同样实现了扩展点接口，但是 Wrapper 不是扩展点的真正实现。它的用途主要是用于从 ExtensionLoader 返回扩展点时，包装在真正的扩展点实现外。即从 ExtensionLoader 中返回的实际上是 Wrapper 类的实例，Wrapper 持有了实际的扩展点实现类。 扩展点的 Wrapper 类可以有多个，也可以根据需要新增。 通过 Wrapper 类可以把所有扩展点公共逻辑移至 Wrapper 中。新加的 Wrapper 在所有的扩展点上添加了逻辑，有些类似 AOP，即 Wrapper 代理了扩展点。</p><h3 id="扩展点自动装配" tabindex="-1"><a class="header-anchor" href="#扩展点自动装配" aria-hidden="true">#</a> 扩展点自动装配</h3><p>加载扩展点时，自动注入依赖的扩展点。加载扩展点时，扩展点实现类的成员如果为其它扩展点类型，ExtensionLoader 在会自动注入依赖的扩展点。ExtensionLoader 通过扫描扩展点实现类的所有 setter 方法来判定其成员。即 ExtensionLoader 会执行扩展点的拼装操作。 示例：有两个为扩展点 CarMaker（造车者）、WheelMaker (造轮者) 接口类如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">CarMaker</span> <span class="token punctuation">{</span>
    <span class="token class-name">Car</span> <span class="token function">makeCar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
 
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">WheelMaker</span> <span class="token punctuation">{</span>
    <span class="token class-name">Wheel</span> <span class="token function">makeWheel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>CarMaker 的一个实现类：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RaceCarMaker</span> <span class="token keyword">implements</span> <span class="token class-name">CarMaker</span> <span class="token punctuation">{</span>
    <span class="token class-name">WheelMaker</span> wheelMaker<span class="token punctuation">;</span>
 
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setWheelMaker</span><span class="token punctuation">(</span><span class="token class-name">WheelMaker</span> wheelMaker<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>wheelMaker <span class="token operator">=</span> wheelMaker<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
 
    <span class="token keyword">public</span> <span class="token class-name">Car</span> <span class="token function">makeCar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// ...</span>
        <span class="token class-name">Wheel</span> wheel <span class="token operator">=</span> wheelMaker<span class="token punctuation">.</span><span class="token function">makeWheel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// ...</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RaceCar</span><span class="token punctuation">(</span>wheel<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,18),k={href:"https://dubbo.apache.org/zh/docs/v2.7/dev/spi/#%E6%89%A9%E5%B1%95%E7%82%B9%E8%87%AA%E9%80%82%E5%BA%94",target:"_blank",rel:"noopener noreferrer"},v=p(`<h3 id="扩展点自适应" tabindex="-1"><a class="header-anchor" href="#扩展点自适应" aria-hidden="true">#</a> 扩展点自适应</h3><p>ExtensionLoader 注入的依赖扩展点是一个 Adaptive 实例，直到扩展点方法执行时才决定调用是哪一个扩展点实现。 Dubbo 使用 URL 对象（包含了Key-Value）传递配置信息。 扩展点方法调用会有URL参数（或是参数有URL成员） 这样依赖的扩展点也可以从URL拿到配置信息，所有的扩展点自己定好配置的Key后，配置信息从URL上从最外层传入。URL在配置传递上即是一条总线。 示例：有两个为扩展点 CarMaker、WheelMaker 接口类如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">CarMaker</span> <span class="token punctuation">{</span>
    <span class="token class-name">Car</span> <span class="token function">makeCar</span><span class="token punctuation">(</span><span class="token class-name">URL</span> url<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
 
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">WheelMaker</span> <span class="token punctuation">{</span>
    <span class="token class-name">Wheel</span> <span class="token function">makeWheel</span><span class="token punctuation">(</span><span class="token class-name">URL</span> url<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>CarMaker 的一个实现类：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RaceCarMaker</span> <span class="token keyword">implements</span> <span class="token class-name">CarMaker</span> <span class="token punctuation">{</span>
    <span class="token class-name">WheelMaker</span> wheelMaker<span class="token punctuation">;</span>
    
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setWheelMaker</span><span class="token punctuation">(</span><span class="token class-name">WheelMaker</span> wheelMaker<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>wheelMaker <span class="token operator">=</span> wheelMaker<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">public</span> <span class="token class-name">Car</span> <span class="token function">makeCar</span><span class="token punctuation">(</span><span class="token class-name">URL</span> url<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// ...</span>
        <span class="token class-name">Wheel</span> wheel <span class="token operator">=</span> wheelMaker<span class="token punctuation">.</span><span class="token function">makeWheel</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// ...</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RaceCar</span><span class="token punctuation">(</span>wheel<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当上面执行</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// ...</span>
<span class="token class-name">Wheel</span> wheel <span class="token operator">=</span> wheelMaker<span class="token punctuation">.</span><span class="token function">makeWheel</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// ...</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>时，注入的 Adaptive 实例可以提取事先定义好的 Key 来决定使用哪个 WheelMaker 实现来调用对应实现的真正的 makeWheel 方法。如提取 wheel.type Key，即 url.get(&quot;wheel.type&quot;) 来决定 WheelMaker 实现。Adaptive 实例的逻辑是固定，从 URL 中提取事先定义好的 Key，动态生成真正的实现并执行它。 ExtensionLoader 里面的扩展点注入的 Adaptive 实现是在dubbo加载扩展点时动态生成的。Key是从URL中获取的，而URL中Key的值是在扩展点接口的方法定义上通过@Adaptive注解提供的。 下面是 Dubbo 的 Transporter 扩展点的代码：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Transporter</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Adaptive</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&quot;server&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;transport&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token class-name">Server</span> <span class="token function">bind</span><span class="token punctuation">(</span><span class="token class-name">URL</span> url<span class="token punctuation">,</span> <span class="token class-name">ChannelHandler</span> handler<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">RemotingException</span><span class="token punctuation">;</span>
 
    <span class="token annotation punctuation">@Adaptive</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&quot;client&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;transport&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token class-name">Client</span> <span class="token function">connect</span><span class="token punctuation">(</span><span class="token class-name">URL</span> url<span class="token punctuation">,</span> <span class="token class-name">ChannelHandler</span> handler<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">RemotingException</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于 bind() 方法，Adaptive 实现先查找 server key，如果该 Key 没有值则找 transport key 值，来决定代理到哪个实际扩展点。</p><h3 id="扩展点自动激活" tabindex="-1"><a class="header-anchor" href="#扩展点自动激活" aria-hidden="true">#</a> 扩展点自动激活</h3><p>对于集合类扩展点，比如：Filter, InvokerListener, ExportListener, TelnetHandler, StatusChecker 等，可以同时加载多个实现，此时，可以用自动激活来简化配置，如：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>dubbo<span class="token punctuation">.</span>common<span class="token punctuation">.</span>extension<span class="token punctuation">.</span></span><span class="token class-name">Activate</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>dubbo<span class="token punctuation">.</span>rpc<span class="token punctuation">.</span></span><span class="token class-name">Filter</span></span><span class="token punctuation">;</span>
 
<span class="token annotation punctuation">@Activate</span> <span class="token comment">// 无条件自动激活</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">XxxFilter</span> <span class="token keyword">implements</span> <span class="token class-name">Filter</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>或：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>dubbo<span class="token punctuation">.</span>common<span class="token punctuation">.</span>extension<span class="token punctuation">.</span></span><span class="token class-name">Activate</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>dubbo<span class="token punctuation">.</span>rpc<span class="token punctuation">.</span></span><span class="token class-name">Filter</span></span><span class="token punctuation">;</span>
 
<span class="token annotation punctuation">@Activate</span><span class="token punctuation">(</span><span class="token string">&quot;xxx&quot;</span><span class="token punctuation">)</span> <span class="token comment">// 当配置了xxx参数，并且参数为有效值时激活，比如配了cache=&quot;lru&quot;，自动激活CacheFilter。</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">XxxFilter</span> <span class="token keyword">implements</span> <span class="token class-name">Filter</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>或：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>dubbo<span class="token punctuation">.</span>common<span class="token punctuation">.</span>extension<span class="token punctuation">.</span></span><span class="token class-name">Activate</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>dubbo<span class="token punctuation">.</span>rpc<span class="token punctuation">.</span></span><span class="token class-name">Filter</span></span><span class="token punctuation">;</span>
 
<span class="token annotation punctuation">@Activate</span><span class="token punctuation">(</span>group <span class="token operator">=</span> <span class="token string">&quot;provider&quot;</span><span class="token punctuation">,</span> value <span class="token operator">=</span> <span class="token string">&quot;xxx&quot;</span><span class="token punctuation">)</span> <span class="token comment">// 只对提供方激活，group可选&quot;provider&quot;或&quot;consumer&quot;</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">XxxFilter</span> <span class="token keyword">implements</span> <span class="token class-name">Filter</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,17),m={href:"https://dubbo.apache.org/zh/docs/v2.7/dev/spi/#fnref:1",target:"_blank",rel:"noopener noreferrer"},b=a("li",null,"注意：扩展点使用单一实例加载（请确保扩展实现的线程安全性），缓存在 ExtensionLoader 中",-1);function h(x,g){const s=l("ExternalLinkIcon");return c(),o("div",null,[u,a("p",null,[n("在扩展类的 jar 包内 "),a("a",r,[n("1"),e(s)]),n("，放置扩展点配置文件 META-INF/dubbo/接口全限定名，内容为：配置名=扩展实现类全限定名，多个实现类用换行符分隔。")]),d,a("p",null,[n("ExtensionLoader 加载 CarMaker 的扩展点实现 RaceCarMaker 时，setWheelMaker 方法的 WheelMaker 也是扩展点则会注入 WheelMaker 的实现。 这里带来另一个问题，ExtensionLoader 要注入依赖扩展点时，如何决定要注入依赖扩展点的哪个实现。在这个示例中，即是在多个WheelMaker 的实现中要注入哪个。 这个问题在下面一点 "),a("a",k,[n("扩展点自适应"),e(s)]),n(" 中说明。")]),v,a("ol",null,[a("li",null,[n("注意：这里的配置文件是放在你自己的 jar 包内，不是 dubbo 本身的 jar 包内，Dubbo 会全 ClassPath 扫描所有 jar 包内同名的这个文件，然后进行合并 "),a("a",m,[n("↩︎"),e(s)])]),b])])}const y=t(i,[["render",h],["__file","3-extend-point-dubbo.html.vue"]]);export{y as default};

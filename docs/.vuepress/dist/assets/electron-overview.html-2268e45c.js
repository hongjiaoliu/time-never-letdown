import{_ as p,V as l,W as c,X as n,Y as s,$ as e,Z as a,F as o}from"./framework-bcbeea85.js";const i={},u=a(`<h1 id="electron-概览" tabindex="-1"><a class="header-anchor" href="#electron-概览" aria-hidden="true">#</a> Electron 概览</h1><p>您好,我尝试根据您的要求编写了一篇 Electron 技术文章的Markdown格式文本:</p><h1 id="electron-桌面应用开发框架" tabindex="-1"><a class="header-anchor" href="#electron-桌面应用开发框架" aria-hidden="true">#</a> Electron - 桌面应用开发框架</h1><h2 id="背景" tabindex="-1"><a class="header-anchor" href="#背景" aria-hidden="true">#</a> 背景</h2><p>随着 web 技术的发展,越来越多的开发者开始使用 web 技术来开发桌面应用。相比传统的桌面应用开发方式,使用 web 技术开发桌面应用有许多优势:</p><ul><li>前端工程师可以利用已掌握的 web 技术开发桌面应用</li><li>代码可重用性高,前后端统一使用 web 技术开发</li><li>跨平台,利用 Electron 可以使同一代码打包生成 Windows、Mac 和 Linux 多个平台的安装包</li><li>更简单、高效的开发流程,开发调试过程使用熟悉的 web 技术 Electron 正是在这个背景下诞生的,它为使用 web 技术开发桌面应用提供了解决方案。</li></ul><h2 id="electron-简介" tabindex="-1"><a class="header-anchor" href="#electron-简介" aria-hidden="true">#</a> Electron 简介</h2><p>Electron 由 GitHub 开发,采用 JavaScript、HTML 和 CSS 等 web 技术进行桌面应用开发。 通过将 Chromium 和 Node.js 合并到同一个运行时环境中,Electron 允许使用 HTML、CSS 和 JavaScript 构建完整的桌面应用程序。应用运行在使用 web 页面作为 GUI 的 Chromium 浏览器中,可以访问 Node.js 提供的后端功能。 Electron 架构包括:</p><ul><li><strong>Main Process</strong>: 主进程,用于创建和管理 BrowserWindow 实例等功能。</li><li><strong>Renderer Process</strong>: 渲染进程,每个 web 页面运行在独立的渲染进程中。</li><li><strong>Main和Renderer进程间通信</strong>: 通过IPC通道进行通信。</li></ul><h2 id="开发桌面应用步骤" tabindex="-1"><a class="header-anchor" href="#开发桌面应用步骤" aria-hidden="true">#</a> 开发桌面应用步骤</h2><p>使用 Electron 开发桌面应用的基本步骤如下:</p><ol><li><p>安装 Electron</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> electron --save-dev
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>创建主程序文件 main.js</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code> <span class="token keyword">const</span> <span class="token punctuation">{</span>app<span class="token punctuation">,</span> BrowserWindow<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;electron&#39;</span><span class="token punctuation">)</span>

   <span class="token keyword">function</span> <span class="token function">createWindow</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
     <span class="token keyword">const</span> win <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BrowserWindow</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

     win<span class="token punctuation">.</span><span class="token function">loadFile</span><span class="token punctuation">(</span><span class="token string">&#39;index.html&#39;</span><span class="token punctuation">)</span>

   <span class="token punctuation">}</span>

   app<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;ready&#39;</span><span class="token punctuation">,</span> createWindow<span class="token punctuation">)</span>
  
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>main.js 作为主进程,在应用启动时被执行,用于创建浏览器窗口及其它初始化工作。</p></li><li><p>创建网页文件 index.html</p></li></ol><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code> <span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span>
   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span>
   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>UTF-8<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Hello World!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>Hello World!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span> 
     We are using node <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span>versions<span class="token punctuation">.</span>node<span class="token punctuation">)</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>,
     Chrome <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span>versions<span class="token punctuation">.</span>chrome<span class="token punctuation">)</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>,
     and Electron <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span>versions<span class="token punctuation">.</span>electron<span class="token punctuation">)</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>.
   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>显示在浏览器窗口中的网页 UI 内容。 4. 打包和运行</p>`,14),r=a(`<li><p>运行</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>electron <span class="token builtin class-name">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在开发阶段,可以直接运行以试运行应用。</p></li>`,1),d={href:"https://github.com/electron/electron-packager",target:"_blank",rel:"noopener noreferrer"},k={href:"https://www.electron.build/",target:"_blank",rel:"noopener noreferrer"},g=a('<h2 id="适用场景" tabindex="-1"><a class="header-anchor" href="#适用场景" aria-hidden="true">#</a> 适用场景</h2><p>Electron 适用于:</p><ul><li>需要使用 native 功能的跨平台工具或应用程序,如文件系统访问、系统通知等</li><li>基于 web 技术栈的应用程序,希望搭载成桌面应用分发</li><li>对界面样式有特殊需求的应用程序</li><li>开发需要统一浏览器环境的应用程序 许多知名的桌面</li><li>应用都是使用 Electron 开发的,例如: <ul><li>Visual Studio Code</li><li>Slack</li><li>Discord</li><li>Twitch</li><li>WhatsApp</li><li>Microsoft Teams 等。 Electron 凭借其跨平台、易于集成 web 技术栈的特点,被广泛应用于桌面应用的开发。随着 Electron 的不断发展,它还在吸引更多的开发者加入到桌面应用的开发中。</li></ul><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2> Electron 通过将 Chromium 和 Node.js 合并到同一个运行环境,极大地简化了使用 web 技术开发跨平台桌面应用程序的复杂度。它拥有庞大的用户群和活跃的开源社区。 要开发出功能强大、体验优良的 Electron 应用,开发者需要充分利用好 Electron 提供的丰富的原生 API,同时结合 web 技术的优势,做出最佳的技术选择。 对于许多需要跨平台、希望整合 web 技术的桌面应用来说,Electron 无疑是一个不错的选择。随着Electron 的发展,相信会有越来越多的优秀桌面应用出现。</li></ul>',3);function v(h,m){const t=o("ExternalLinkIcon");return l(),c("div",null,[u,n("ul",null,[r,n("li",null,[n("p",null,[s("打包 使用 "),n("a",d,[s("electron-packager"),e(t)]),s(" 或 "),n("a",k,[s("electron-builder"),e(t)]),s(" 生成对应平台的应用安装文件。 以上就是使用 Electron 开发桌面应用的基本步骤。Electron 提供了一系列丰富的 API 用于访问底层操作系统功能,可以建立功能强大的桌面应用。")])])]),g])}const w=p(i,[["render",v],["__file","electron-overview.html.vue"]]);export{w as default};
